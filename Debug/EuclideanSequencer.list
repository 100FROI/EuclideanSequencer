
EuclideanSequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007120  08007120  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08007120  08007120  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007120  08007120  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  2000005c  08007184  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08007184  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014500  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000305c  00000000  00000000  000345cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f08  00000000  00000000  000389c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029699  00000000  00000000  000398c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ce1  00000000  00000000  00062f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010303f  00000000  00000000  00079c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005690  00000000  00000000  0017cc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00182314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006fac 	.word	0x08006fac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08006fac 	.word	0x08006fac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <CVSeq_initCVSequencer>:
#include "CVSequencer.h"

void CVSeq_initCVSequencer(CVSequencer* cvSeq, GPIO_PinPort TRIG, ADC_HandleTypeDef* CVIn, DAC_HandleTypeDef* CVOut,
		 uint8_t dacChannel, GPIO_PinPort CHANGEFREQ, GPIO_PinPort DISPLAY)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	1d38      	adds	r0, r7, #4
 8000afa:	e880 0006 	stmia.w	r0, {r1, r2}
 8000afe:	603b      	str	r3, [r7, #0]
	cvSeq->_adcValues[0] = 0;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	81da      	strh	r2, [r3, #14]
	cvSeq->_adcValues[1] = 0;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	821a      	strh	r2, [r3, #16]
	cvSeq->_outValue = 0;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	825a      	strh	r2, [r3, #18]
	cvSeq->_freq = 0;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	cvSeq->_hadc = CVIn;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
	cvSeq->_currentStep = 0;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2200      	movs	r2, #0
 8000b22:	735a      	strb	r2, [r3, #13]
	cvSeq->_hdac = CVOut;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	609a      	str	r2, [r3, #8]
	cvSeq->_dacChannel = dacChannel;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	7f3a      	ldrb	r2, [r7, #28]
 8000b2e:	731a      	strb	r2, [r3, #12]
	cvSeq->_DISPLAY = DISPLAY;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	331c      	adds	r3, #28
 8000b34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3c:	e883 0003 	stmia.w	r3, {r0, r1}
	cvSeq->_CHANGEFREQ = CHANGEFREQ;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3324      	adds	r3, #36	; 0x24
 8000b44:	f107 0220 	add.w	r2, r7, #32
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	e883 0003 	stmia.w	r3, {r0, r1}
	cvSeq->_TRIG = TRIG;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3314      	adds	r3, #20
 8000b54:	1d3a      	adds	r2, r7, #4
 8000b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <CVSeq_updateCVValue>:

void CVSeq_updateCVValue(CVSequencer* cvSeq)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(cvSeq->_hadc, (uint32_t*)cvSeq->_adcValues, 2);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6858      	ldr	r0, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	330e      	adds	r3, #14
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f002 fb59 	bl	8003234 <HAL_ADC_Start_DMA>

	if(cvSeq->_freq != 0 && cvSeq->_currentStep == cvSeq->_freq)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00e      	beq.n	8000ba8 <CVSeq_updateCVValue+0x3e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7b5a      	ldrb	r2, [r3, #13]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d108      	bne.n	8000ba8 <CVSeq_updateCVValue+0x3e>
	{
		cvSeq->_outValue = cvSeq->_adcValues[1];
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	8a1b      	ldrh	r3, [r3, #16]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	825a      	strh	r2, [r3, #18]
		cvSeq->_currentStep = 1;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	735a      	strb	r2, [r3, #13]
 8000ba6:	e00a      	b.n	8000bbe <CVSeq_updateCVValue+0x54>
	} else
	{
		cvSeq->_outValue = cvSeq->_adcValues[0];
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	89db      	ldrh	r3, [r3, #14]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	825a      	strh	r2, [r3, #18]
		++cvSeq->_currentStep;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7b5b      	ldrb	r3, [r3, #13]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	735a      	strb	r2, [r3, #13]
	}
	HAL_DAC_Start(cvSeq->_hdac, DAC_CHANNEL_1);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fb24 	bl	8004212 <HAL_DAC_Start>
	HAL_DAC_SetValue(cvSeq->_hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, cvSeq->_outValue);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6898      	ldr	r0, [r3, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	8a5b      	ldrh	r3, [r3, #18]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f003 fbc2 	bl	8004360 <HAL_DAC_SetValue>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <DisplayPattern>:
#include "DisplayPattern.h"

void DisplayPattern(uint16_t pattern, uint8_t patternSize, GPIO_PinPort CLK, GPIO_PinPort PATTERN, GPIO_PinPort LATCH)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	1d39      	adds	r1, r7, #4
 8000bf0:	e881 000c 	stmia.w	r1, {r2, r3}
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	81fb      	strh	r3, [r7, #14]
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	737b      	strb	r3, [r7, #13]
	//uint32_t patternAndSize = 0;
	GPIO_PinState pinState = GPIO_PIN_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(PATTERN.Port, PATTERN.Pin, pinState);
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000c04:	7cfa      	ldrb	r2, [r7, #19]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 f8c4 	bl	8004d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH.Port, LATCH.Pin, GPIO_PIN_RESET);
 8000c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8000c10:	2200      	movs	r2, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 f8be 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i = 0; i < MAX_SEQUENCER_STEPS; ++i)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e045      	b.n	8000caa <DisplayPattern+0xc6>
	{
		HAL_GPIO_WritePin(CLK.Port, CLK.Pin, GPIO_PIN_RESET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	8939      	ldrh	r1, [r7, #8]
 8000c22:	2200      	movs	r2, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 f8b5 	bl	8004d94 <HAL_GPIO_WritePin>
		pinState = Utils_boolToPinState(i<patternSize);
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	bfb4      	ite	lt
 8000c32:	2301      	movlt	r3, #1
 8000c34:	2300      	movge	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fed7 	bl	80019ec <Utils_boolToPinState>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	74fb      	strb	r3, [r7, #19]
		HAL_GPIO_WritePin(PATTERN.Port, PATTERN.Pin, pinState); // SER Input SIZE
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000c46:	7cfa      	ldrb	r2, [r7, #19]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 f8a3 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK.Port, CLK.Pin, GPIO_PIN_SET);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	8939      	ldrh	r1, [r7, #8]
 8000c52:	2201      	movs	r2, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 f89d 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK.Port, CLK.Pin, GPIO_PIN_RESET);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	8939      	ldrh	r1, [r7, #8]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 f897 	bl	8004d94 <HAL_GPIO_WritePin>
		pinState = Utils_boolToPinState((pattern & (1 << (patternSize - (i+1)))) > 0);
 8000c66:	89fa      	ldrh	r2, [r7, #14]
 8000c68:	7b79      	ldrb	r1, [r7, #13]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	1acb      	subs	r3, r1, r3
 8000c70:	2101      	movs	r1, #1
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bfcc      	ite	gt
 8000c7c:	2301      	movgt	r3, #1
 8000c7e:	2300      	movle	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 feb2 	bl	80019ec <Utils_boolToPinState>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	74fb      	strb	r3, [r7, #19]
		HAL_GPIO_WritePin(PATTERN.Port, PATTERN.Pin, pinState); // SER Input PATTERN
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000c90:	7cfa      	ldrb	r2, [r7, #19]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 f87e 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLK.Port, CLK.Pin, GPIO_PIN_SET);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8939      	ldrh	r1, [r7, #8]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 f878 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i = 0; i < MAX_SEQUENCER_STEPS; ++i)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	ddb6      	ble.n	8000c1e <DisplayPattern+0x3a>
	}
	HAL_GPIO_WritePin(LATCH.Port, LATCH.Pin, GPIO_PIN_SET);
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 f86c 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8000cbc:	bf00      	nop
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <Seq_initSequencer>:
#include "Sequencer.h"

void Seq_initSequencer(Sequencer* seq, GPIO_PinPort SWITCH, GPIO_PinPort BPM_ROTA, GPIO_PinPort BPM_ROTB,
		GPIO_PinPort BPMOUT, GPIO_PinPort BPMDISPLAY, GPIO_PinPort MODEDisplay, TIM_HandleTypeDef* htim, Track_GPIOs* T_GPIOs)
{
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc8:	b0cb      	sub	sp, #300	; 0x12c
 8000cca:	af44      	add	r7, sp, #272	; 0x110
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	1d38      	adds	r0, r7, #4
 8000cd0:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
	seq->_SWITCH = SWITCH;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	33e0      	adds	r3, #224	; 0xe0
 8000cda:	1d3a      	adds	r2, r7, #4
 8000cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce0:	e883 0003 	stmia.w	r3, {r0, r1}
	seq->_BPM_ROTA = BPM_ROTA;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	33e8      	adds	r3, #232	; 0xe8
 8000ce8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf0:	e883 0003 	stmia.w	r3, {r0, r1}
	seq->_BPM_ROTB = BPM_ROTB;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	33f0      	adds	r3, #240	; 0xf0
 8000cf8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d00:	e883 0003 	stmia.w	r3, {r0, r1}
	seq->_BPMOUT = BPMOUT;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	33fc      	adds	r3, #252	; 0xfc
 8000d08:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d10:	e883 0003 	stmia.w	r3, {r0, r1}
	seq->_BPMDisplay = BPMDISPLAY;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000d1a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d22:	e883 0003 	stmia.w	r3, {r0, r1}
	seq->_MODEDisplay = MODEDisplay;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000d2c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d34:	e883 0003 	stmia.w	r3, {r0, r1}
	seq->_htim = htim;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	for(int i=0; i < NBTRACKS; ++i)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e021      	b.n	8000d8a <Seq_initSequencer+0xc6>
	{
		Track_initTrack(&(seq->_tracks[i]), T_GPIOs[i], i+1);
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	eb02 0c03 	add.w	ip, r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d5c:	18d6      	adds	r6, r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	930d      	str	r3, [sp, #52]	; 0x34
 8000d64:	466d      	mov	r5, sp
 8000d66:	f106 040c 	add.w	r4, r6, #12
 8000d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	602b      	str	r3, [r5, #0]
 8000d7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d7e:	4660      	mov	r0, ip
 8000d80:	f000 fb8c 	bl	800149c <Track_initTrack>
	for(int i=0; i < NBTRACKS; ++i)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	ddda      	ble.n	8000d46 <Seq_initSequencer+0x82>
	}
	seq->_BPM = 60;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	223c      	movs	r2, #60	; 0x3c
 8000d94:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	for(int i=0; i <= seq->_BPM; ++i)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	e00f      	b.n	8000dbe <Seq_initSequencer+0xfa>
	{
		Seq_IncrementBPMDisplay(*seq);
 8000d9e:	68fc      	ldr	r4, [r7, #12]
 8000da0:	4668      	mov	r0, sp
 8000da2:	f104 0310 	add.w	r3, r4, #16
 8000da6:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000daa:	4619      	mov	r1, r3
 8000dac:	f005 fe6e 	bl	8006a8c <memcpy>
 8000db0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db4:	f000 f829 	bl	8000e0a <Seq_IncrementBPMDisplay>
	for(int i=0; i <= seq->_BPM; ++i)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	dde8      	ble.n	8000d9e <Seq_initSequencer+0xda>
	}
	seq->_htim->Init.Period = ((65536*20)/(seq->_BPM))-1;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000dd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000de4:	60da      	str	r2, [r3, #12]
	seq->_BPM_Update = true;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	Seq_updateBPM(seq);
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 f96f 	bl	80010d2 <Seq_updateBPM>
	seq->_mode = E_STEPS;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000e06:	b002      	add	sp, #8
 8000e08:	4770      	bx	lr

08000e0a <Seq_IncrementBPMDisplay>:

void Seq_IncrementBPMDisplay(Sequencer seq)
{
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	f107 0c08 	add.w	ip, r7, #8
 8000e14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(seq._BPMDisplay.Port, seq._BPMDisplay.Pin, GPIO_PIN_SET);
 8000e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e1c:	f8b7 1110 	ldrh.w	r1, [r7, #272]	; 0x110
 8000e20:	2201      	movs	r2, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 ffb6 	bl	8004d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(seq._BPMDisplay.Port, seq._BPMDisplay.Pin, GPIO_PIN_RESET);
 8000e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e2c:	f8b7 1110 	ldrh.w	r1, [r7, #272]	; 0x110
 8000e30:	2200      	movs	r2, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 ffae 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e40:	b004      	add	sp, #16
 8000e42:	4770      	bx	lr

08000e44 <Seq_DecrementBPMDisplay>:

void Seq_DecrementBPMDisplay(Sequencer seq)
{
 8000e44:	b084      	sub	sp, #16
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	f107 0c10 	add.w	ip, r7, #16
 8000e50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i=0; i<999; ++i)
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	e012      	b.n	8000e80 <Seq_DecrementBPMDisplay+0x3c>
	{
		HAL_GPIO_WritePin(seq._BPMDisplay.Port, seq._BPMDisplay.Pin, GPIO_PIN_SET);
 8000e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e5e:	f8b7 1118 	ldrh.w	r1, [r7, #280]	; 0x118
 8000e62:	2201      	movs	r2, #1
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 ff95 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seq._BPMDisplay.Port, seq._BPMDisplay.Pin, GPIO_PIN_RESET);
 8000e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e6e:	f8b7 1118 	ldrh.w	r1, [r7, #280]	; 0x118
 8000e72:	2200      	movs	r2, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 ff8d 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i=0; i<999; ++i)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000e86:	4293      	cmp	r3, r2
 8000e88:	dde7      	ble.n	8000e5a <Seq_DecrementBPMDisplay+0x16>
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e96:	b004      	add	sp, #16
 8000e98:	4770      	bx	lr

08000e9a <Seq_IncrementModeDisplay>:

void Seq_IncrementModeDisplay(Sequencer seq)
{
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	f107 0c08 	add.w	ip, r7, #8
 8000ea4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(seq._MODEDisplay.Port, seq._MODEDisplay.Pin, GPIO_PIN_SET);
 8000ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000eac:	f8b7 1118 	ldrh.w	r1, [r7, #280]	; 0x118
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 ff6e 	bl	8004d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(seq._MODEDisplay.Port, seq._MODEDisplay.Pin, GPIO_PIN_RESET);
 8000eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ebc:	f8b7 1118 	ldrh.w	r1, [r7, #280]	; 0x118
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 ff66 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <Seq_ResetModeDisplay>:

void Seq_ResetModeDisplay(Sequencer seq)
{
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	f107 0c10 	add.w	ip, r7, #16
 8000ee0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i=0; i<7; ++i)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	e012      	b.n	8000f10 <Seq_ResetModeDisplay+0x3c>
	{
		HAL_GPIO_WritePin(seq._MODEDisplay.Port, seq._MODEDisplay.Pin, GPIO_PIN_SET);
 8000eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000eee:	f8b7 1120 	ldrh.w	r1, [r7, #288]	; 0x120
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 ff4d 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seq._MODEDisplay.Port, seq._MODEDisplay.Pin, GPIO_PIN_RESET);
 8000efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000efe:	f8b7 1120 	ldrh.w	r1, [r7, #288]	; 0x120
 8000f02:	2200      	movs	r2, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 ff45 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i=0; i<7; ++i)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	dde9      	ble.n	8000eea <Seq_ResetModeDisplay+0x16>
	}
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
	...

08000f28 <Seq_ChangeMode>:

void Seq_ChangeMode(Sequencer* seq)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b0c7      	sub	sp, #284	; 0x11c
 8000f2c:	af44      	add	r7, sp, #272	; 0x110
 8000f2e:	6078      	str	r0, [r7, #4]
	switch(seq->_mode)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d852      	bhi.n	8000fe0 <Seq_ChangeMode+0xb8>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <Seq_ChangeMode+0x18>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f75 	.word	0x08000f75
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000fbd 	.word	0x08000fbd
	{
	case E_STEPS:
		seq->_mode = E_HITS;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		Seq_IncrementModeDisplay(*seq);
 8000f58:	687c      	ldr	r4, [r7, #4]
 8000f5a:	4668      	mov	r0, sp
 8000f5c:	f104 0310 	add.w	r3, r4, #16
 8000f60:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000f64:	4619      	mov	r1, r3
 8000f66:	f005 fd91 	bl	8006a8c <memcpy>
 8000f6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f6e:	f7ff ff94 	bl	8000e9a <Seq_IncrementModeDisplay>
		break;
 8000f72:	e047      	b.n	8001004 <Seq_ChangeMode+0xdc>
	case E_HITS:
		seq->_mode = E_SUB;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2202      	movs	r2, #2
 8000f78:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		Seq_IncrementModeDisplay(*seq);
 8000f7c:	687c      	ldr	r4, [r7, #4]
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f104 0310 	add.w	r3, r4, #16
 8000f84:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f005 fd7f 	bl	8006a8c <memcpy>
 8000f8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f92:	f7ff ff82 	bl	8000e9a <Seq_IncrementModeDisplay>
		break;
 8000f96:	e035      	b.n	8001004 <Seq_ChangeMode+0xdc>
	case E_SUB:
		seq->_mode = E_OFFSET;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		Seq_IncrementModeDisplay(*seq);
 8000fa0:	687c      	ldr	r4, [r7, #4]
 8000fa2:	4668      	mov	r0, sp
 8000fa4:	f104 0310 	add.w	r3, r4, #16
 8000fa8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000fac:	4619      	mov	r1, r3
 8000fae:	f005 fd6d 	bl	8006a8c <memcpy>
 8000fb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fb6:	f7ff ff70 	bl	8000e9a <Seq_IncrementModeDisplay>
		break;
 8000fba:	e023      	b.n	8001004 <Seq_ChangeMode+0xdc>
	case E_OFFSET:
		seq->_mode = E_STEPS;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		Seq_ResetModeDisplay(*seq);
 8000fc4:	687c      	ldr	r4, [r7, #4]
 8000fc6:	4668      	mov	r0, sp
 8000fc8:	f104 0310 	add.w	r3, r4, #16
 8000fcc:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f005 fd5b 	bl	8006a8c <memcpy>
 8000fd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fda:	f7ff ff7b 	bl	8000ed4 <Seq_ResetModeDisplay>
		break;
 8000fde:	e011      	b.n	8001004 <Seq_ChangeMode+0xdc>
	default:
		seq->_mode = E_STEPS;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		Seq_ResetModeDisplay(*seq);
 8000fe8:	687c      	ldr	r4, [r7, #4]
 8000fea:	4668      	mov	r0, sp
 8000fec:	f104 0310 	add.w	r3, r4, #16
 8000ff0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f005 fd49 	bl	8006a8c <memcpy>
 8000ffa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ffe:	f7ff ff69 	bl	8000ed4 <Seq_ResetModeDisplay>
		break;
 8001002:	bf00      	nop
	}
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <Seq_modifyBPM>:

void Seq_modifyBPM(Sequencer* seq)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b0c7      	sub	sp, #284	; 0x11c
 8001010:	af44      	add	r7, sp, #272	; 0x110
 8001012:	6078      	str	r0, [r7, #4]
	switch(HAL_GPIO_ReadPin(seq->_BPM_ROTB.Port, seq->_BPM_ROTB.Pin))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f003 fe9e 	bl	8004d64 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01c      	beq.n	8001068 <Seq_modifyBPM+0x5c>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d135      	bne.n	800109e <Seq_modifyBPM+0x92>
	{
	case GPIO_PIN_SET:
		if(seq->_BPM < 250)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001038:	2bf9      	cmp	r3, #249	; 0xf9
 800103a:	d832      	bhi.n	80010a2 <Seq_modifyBPM+0x96>
		{
			++(seq->_BPM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001042:	3301      	adds	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			Seq_IncrementBPMDisplay(*seq);
 800104c:	687c      	ldr	r4, [r7, #4]
 800104e:	4668      	mov	r0, sp
 8001050:	f104 0310 	add.w	r3, r4, #16
 8001054:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001058:	4619      	mov	r1, r3
 800105a:	f005 fd17 	bl	8006a8c <memcpy>
 800105e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001062:	f7ff fed2 	bl	8000e0a <Seq_IncrementBPMDisplay>
		}
		break;
 8001066:	e01c      	b.n	80010a2 <Seq_modifyBPM+0x96>
	case GPIO_PIN_RESET:
		if(seq->_BPM > 20)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800106e:	2b14      	cmp	r3, #20
 8001070:	d919      	bls.n	80010a6 <Seq_modifyBPM+0x9a>
		{
			--(seq->_BPM);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001078:	3b01      	subs	r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			Seq_DecrementBPMDisplay(*seq);
 8001082:	687c      	ldr	r4, [r7, #4]
 8001084:	4668      	mov	r0, sp
 8001086:	f104 0310 	add.w	r3, r4, #16
 800108a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800108e:	4619      	mov	r1, r3
 8001090:	f005 fcfc 	bl	8006a8c <memcpy>
 8001094:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001098:	f7ff fed4 	bl	8000e44 <Seq_DecrementBPMDisplay>
		}
		break;
 800109c:	e003      	b.n	80010a6 <Seq_modifyBPM+0x9a>
	default:
		break;
 800109e:	bf00      	nop
 80010a0:	e002      	b.n	80010a8 <Seq_modifyBPM+0x9c>
		break;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <Seq_modifyBPM+0x9c>
		break;
 80010a6:	bf00      	nop
	}
	seq->_htim->Init.Period = ((65536*20)/(seq->_BPM))-1;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80010ae:	461a      	mov	r2, r3
 80010b0:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80010b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80010c0:	60da      	str	r2, [r3, #12]
	seq->_BPM_Update = true;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}

080010d2 <Seq_updateBPM>:

void Seq_updateBPM(Sequencer* seq)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	if(seq->_BPM_Update)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d014      	beq.n	800110e <Seq_updateBPM+0x3c>
	{
		if (HAL_TIM_Base_Init(seq->_htim) != HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 f96a 	bl	80063c4 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <Seq_updateBPM+0x28>
		{
			Seq_Error_Handler();
 80010f6:	f000 f80e 	bl	8001116 <Seq_Error_Handler>
		}
		HAL_TIM_Base_Start_IT(seq->_htim);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001100:	4618      	mov	r0, r3
 8001102:	f005 f9b7 	bl	8006474 <HAL_TIM_Base_Start_IT>
		seq->_BPM_Update = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <Seq_Error_Handler>:

void Seq_Error_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111a:	b672      	cpsid	i
}
 800111c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800111e:	e7fe      	b.n	800111e <Seq_Error_Handler+0x8>

08001120 <Seq_computeTriggers>:
	}
  /* USER CODE END Error_Handler_Debug */
}

void Seq_computeTriggers(Sequencer* seq)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	if(!seq->_computed)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d055      	beq.n	80011e4 <Seq_computeTriggers+0xc4>
	{
		seq->_BPMTrig = Utils_boolToPinState(seq->_step % 4 == 0);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fc4c 	bl	80019ec <Utils_boolToPinState>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
		for(int i=0; i < NBTRACKS; ++i)
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e029      	b.n	80011b8 <Seq_computeTriggers+0x98>
		{
			seq->_SeqTrig[i] = seq->_step % seq->_tracks[i]._sub == 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	460b      	mov	r3, r1
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4403      	add	r3, r0
 8001178:	3305      	adds	r3, #5
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001180:	fb01 f303 	mul.w	r3, r1, r3
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf0c      	ite	eq
 800118c:	2301      	moveq	r3, #1
 800118e:	2300      	movne	r3, #0
 8001190:	b2d9      	uxtb	r1, r3
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	33d8      	adds	r3, #216	; 0xd8
 800119a:	460a      	mov	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
			Track_TriggerNextBeat(&(seq->_tracks[i]));
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f9d2 	bl	8001556 <Track_TriggerNextBeat>
		for(int i=0; i < NBTRACKS; ++i)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	ddd2      	ble.n	8001164 <Seq_computeTriggers+0x44>
		}
		seq->_step = (seq->_step + 1) % 4;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80011c4:	3301      	adds	r3, #1
 80011c6:	425a      	negs	r2, r3
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	bf58      	it	pl
 80011d2:	4253      	negpl	r3, r2
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		seq->_computed = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	}
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <Seq_Trigger>:

void Seq_Trigger(Sequencer* seq)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(seq->_BPMOUT.Port, seq->_BPMOUT.Pin, seq->_BPMTrig);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001206:	461a      	mov	r2, r3
 8001208:	f003 fdc4 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i=0; i < NBTRACKS; ++i)
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e011      	b.n	8001236 <Seq_Trigger+0x4a>
	{
		Track_TogglePin(&(seq->_tracks[i]), seq->_SeqTrig[i]);
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	18d0      	adds	r0, r2, r3
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	33d8      	adds	r3, #216	; 0xd8
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	f000 faf8 	bl	8001820 <Track_TogglePin>
	for(int i=0; i < NBTRACKS; ++i)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b02      	cmp	r3, #2
 800123a:	ddea      	ble.n	8001212 <Seq_Trigger+0x26>
	}
	seq->_computed = false;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	Seq_updateBPM(seq);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff44 	bl	80010d2 <Seq_updateBPM>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <Seq_TracksExternalInterruption>:

void Seq_TracksExternalInterruption(Sequencer* seq, uint16_t pin)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
	switch(seq->_mode)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001266:	2b03      	cmp	r3, #3
 8001268:	d822      	bhi.n	80012b0 <Seq_TracksExternalInterruption+0x5c>
 800126a:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <Seq_TracksExternalInterruption+0x1c>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	08001281 	.word	0x08001281
 8001274:	0800128d 	.word	0x0800128d
 8001278:	08001299 	.word	0x08001299
 800127c:	080012a5 	.word	0x080012a5
	{
	case E_STEPS:
		Seq_updateSteps(seq, pin);
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f819 	bl	80012bc <Seq_updateSteps>
		break;
 800128a:	e012      	b.n	80012b2 <Seq_TracksExternalInterruption+0x5e>
	case E_HITS:
		Seq_updateHits(seq, pin);
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f833 	bl	80012fc <Seq_updateHits>
		break;
 8001296:	e00c      	b.n	80012b2 <Seq_TracksExternalInterruption+0x5e>
	case E_SUB:
		Seq_updateSubdivision(seq, pin);
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f86d 	bl	800137c <Seq_updateSubdivision>
		break;
 80012a2:	e006      	b.n	80012b2 <Seq_TracksExternalInterruption+0x5e>
	case E_OFFSET:
		Seq_offsetPattern(seq, pin);
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4619      	mov	r1, r3
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f847 	bl	800133c <Seq_offsetPattern>
		break;
 80012ae:	e000      	b.n	80012b2 <Seq_TracksExternalInterruption+0x5e>
	default:
		break;
 80012b0:	bf00      	nop
	}
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop

080012bc <Seq_updateSteps>:

void Seq_updateSteps(Sequencer* seq, uint16_t pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
	for(int i = 0 ; i < NBTRACKS ; ++i)
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e00e      	b.n	80012ec <Seq_updateSteps+0x30>
	{
		Track_updateSteps(&(seq->_tracks[i]), pin);
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	887a      	ldrh	r2, [r7, #2]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f990 	bl	8001606 <Track_updateSteps>
	for(int i = 0 ; i < NBTRACKS ; ++i)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	dded      	ble.n	80012ce <Seq_updateSteps+0x12>
	}
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Seq_updateHits>:

void Seq_updateHits(Sequencer* seq, uint16_t pin)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
	for(int i = 0 ; i < NBTRACKS ; ++i)
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e00e      	b.n	800132c <Seq_updateHits+0x30>
	{
		Track_updateHits(&(seq->_tracks[i]), pin);
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f9b1 	bl	8001688 <Track_updateHits>
	for(int i = 0 ; i < NBTRACKS ; ++i)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b02      	cmp	r3, #2
 8001330:	dded      	ble.n	800130e <Seq_updateHits+0x12>
	}
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <Seq_offsetPattern>:

void Seq_offsetPattern(Sequencer* seq, uint16_t pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
	for(int i = 0 ; i < NBTRACKS ; ++i)
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e00e      	b.n	800136c <Seq_offsetPattern+0x30>
	{
		Track_offsetPattern(&(seq->_tracks[i]), pin);
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	887a      	ldrh	r2, [r7, #2]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f9d4 	bl	800170e <Track_offsetPattern>
	for(int i = 0 ; i < NBTRACKS ; ++i)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3301      	adds	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b02      	cmp	r3, #2
 8001370:	dded      	ble.n	800134e <Seq_offsetPattern+0x12>
	}
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <Seq_updateSubdivision>:

void Seq_updateSubdivision(Sequencer* seq, uint16_t pin)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
	for(int i = 0 ; i < NBTRACKS ; ++i)
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e00e      	b.n	80013ac <Seq_updateSubdivision+0x30>
	{
		Track_updateSubdivision(&(seq->_tracks[i]), pin);
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f9f5 	bl	8001790 <Track_updateSubdivision>
	for(int i = 0 ; i < NBTRACKS ; ++i)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	dded      	ble.n	800138e <Seq_updateSubdivision+0x12>
	}
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <Seq_resetTriggers>:

void Seq_resetTriggers(Sequencer seq)
{
 80013bc:	b084      	sub	sp, #16
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	f107 0c10 	add.w	ip, r7, #16
 80013c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//HAL_GPIO_WritePin(seq._tracks[i]._TRIGOUT.Port, seq._tracks[i]._TRIGOUT.Pin, GPIO_PIN_RESET);
	for(int i = 0; i < 109000; ++i) asm("NOP");
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	e003      	b.n	80013da <Seq_resetTriggers+0x1e>
 80013d2:	bf00      	nop
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <Seq_resetTriggers+0xdc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	ddf7      	ble.n	80013d2 <Seq_resetTriggers+0x16>
	HAL_GPIO_WritePin(seq._BPMOUT.Port, seq._BPMOUT.Pin, GPIO_PIN_RESET);
 80013e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013e6:	f8b7 1110 	ldrh.w	r1, [r7, #272]	; 0x110
 80013ea:	2200      	movs	r2, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fcd1 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i = 0 ; i < NBTRACKS ; ++i)
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	e044      	b.n	8001482 <Seq_resetTriggers+0xc6>
	{
		HAL_GPIO_WritePin(seq._tracks[i]._TRIGOUT.Port, seq._tracks[i]._TRIGOUT.Pin, GPIO_PIN_RESET);
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	3310      	adds	r3, #16
 8001404:	443b      	add	r3, r7
 8001406:	3308      	adds	r3, #8
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	3310      	adds	r3, #16
 8001416:	443b      	add	r3, r7
 8001418:	330c      	adds	r3, #12
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	f003 fcb8 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seq._tracks[i]._BPMOUT.Port, seq._tracks[i]._BPMOUT.Pin, GPIO_PIN_RESET);
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	3310      	adds	r3, #16
 8001430:	443b      	add	r3, r7
 8001432:	3310      	adds	r3, #16
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	3310      	adds	r3, #16
 8001442:	443b      	add	r3, r7
 8001444:	3314      	adds	r3, #20
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f003 fca2 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seq._tracks[i]._CHASER.Port, seq._tracks[i]._CHASER.Pin, GPIO_PIN_RESET);
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	3310      	adds	r3, #16
 800145c:	443b      	add	r3, r7
 800145e:	3328      	adds	r3, #40	; 0x28
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	3310      	adds	r3, #16
 800146e:	443b      	add	r3, r7
 8001470:	332c      	adds	r3, #44	; 0x2c
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	f003 fc8c 	bl	8004d94 <HAL_GPIO_WritePin>
	for(int i = 0 ; i < NBTRACKS ; ++i)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	ddb7      	ble.n	80013f8 <Seq_resetTriggers+0x3c>
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001494:	b004      	add	sp, #16
 8001496:	4770      	bx	lr
 8001498:	0001a9c7 	.word	0x0001a9c7

0800149c <Track_initTrack>:



void Track_initTrack(Track* track, Track_GPIOs GPIOs, int nbTrig)/*GPIO_PinPort TRIGOUT,
		GPIO_PinPort ROTA, GPIO_PinPort ROTB, GPIO_PinPort CHASER, GPIO_PinPort BPMOUT)*/
{
 800149c:	b084      	sub	sp, #16
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	f107 0014 	add.w	r0, r7, #20
 80014aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	track->_currentStep = 1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	70da      	strb	r2, [r3, #3]
	track->_sub = E_NOIRE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2204      	movs	r2, #4
 80014b8:	715a      	strb	r2, [r3, #5]
	track->_TRIGOUT = GPIOs.TRIGOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3308      	adds	r3, #8
 80014be:	f107 0214 	add.w	r2, r7, #20
 80014c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014c6:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_ROTA = GPIOs.ROTA;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3318      	adds	r3, #24
 80014ce:	f107 021c 	add.w	r2, r7, #28
 80014d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d6:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_ROTB = GPIOs.ROTB;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3320      	adds	r3, #32
 80014de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e6:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_CHASER = GPIOs.CHASER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3328      	adds	r3, #40	; 0x28
 80014ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80014f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f6:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_BPMOUT = GPIOs.BPMOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3310      	adds	r3, #16
 80014fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001502:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001506:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_PATTERN = GPIOs.PATTERN;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3340      	adds	r3, #64	; 0x40
 800150e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001516:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_CLK = GPIOs.CLK;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3338      	adds	r3, #56	; 0x38
 800151e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001526:	e883 0003 	stmia.w	r3, {r0, r1}
	track->_LATCH = GPIOs.LATCH;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3330      	adds	r3, #48	; 0x30
 800152e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001536:	e883 0003 	stmia.w	r3, {r0, r1}
	Track_updatePattern(track, 8, nbTrig);
 800153a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	2108      	movs	r1, #8
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f828 	bl	8001598 <Track_updatePattern>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001552:	b004      	add	sp, #16
 8001554:	4770      	bx	lr

08001556 <Track_TriggerNextBeat>:

void Track_TriggerNextBeat(Track* track)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	track->_TrigNextBeat = Utils_boolToPinState((track->_pattern & (1 << (track->_nbSteps - track->_currentStep))) > 0);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	789b      	ldrb	r3, [r3, #2]
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2201      	movs	r2, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	400b      	ands	r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	bfcc      	ite	gt
 800157c:	2301      	movgt	r3, #1
 800157e:	2300      	movle	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fa32 	bl	80019ec <Utils_boolToPinState>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	719a      	strb	r2, [r3, #6]
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Track_updatePattern>:

void Track_updatePattern(Track* track, uint8_t nbSteps, uint8_t nbHits)
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af04      	add	r7, sp, #16
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	4613      	mov	r3, r2
 80015a6:	70bb      	strb	r3, [r7, #2]
	track->_nbHits = nbHits;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	78ba      	ldrb	r2, [r7, #2]
 80015ac:	711a      	strb	r2, [r3, #4]
	track->_nbSteps = nbSteps;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	709a      	strb	r2, [r3, #2]
	track->_pattern = Utils_computePattern(track->_nbSteps, track->_nbHits);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	789a      	ldrb	r2, [r3, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f000 f9ae 	bl	8001920 <Utils_computePattern>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	801a      	strh	r2, [r3, #0]
	DisplayPattern(track->_pattern, track->_nbSteps, track->_CLK, track->_PATTERN, track->_LATCH);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	881c      	ldrh	r4, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	789d      	ldrb	r5, [r3, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	ae02      	add	r6, sp, #8
 80015da:	3230      	adds	r2, #48	; 0x30
 80015dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e0:	e886 0003 	stmia.w	r6, {r0, r1}
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	466e      	mov	r6, sp
 80015e8:	3240      	adds	r2, #64	; 0x40
 80015ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ee:	e886 0003 	stmia.w	r6, {r0, r1}
 80015f2:	3338      	adds	r3, #56	; 0x38
 80015f4:	cb0c      	ldmia	r3, {r2, r3}
 80015f6:	4629      	mov	r1, r5
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff faf3 	bl	8000be4 <DisplayPattern>
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001606 <Track_updateSteps>:

void Track_updateSteps(Track* track, uint16_t pin)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]
	if(pin == track->_ROTA.Pin)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8b9b      	ldrh	r3, [r3, #28]
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	429a      	cmp	r2, r3
 800161a:	d131      	bne.n	8001680 <Track_updateSteps+0x7a>
	{
		GPIO_PinState pinState = HAL_GPIO_ReadPin(track->_ROTB.Port, track->_ROTB.Pin);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f003 fb9c 	bl	8004d64 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
		switch(pinState)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <Track_updateSteps+0x4a>
 8001636:	2b01      	cmp	r3, #1
 8001638:	d115      	bne.n	8001666 <Track_updateSteps+0x60>
		{
		case GPIO_PIN_SET:
			if(track->_nbSteps < MAX_SEQUENCER_STEPS)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	789b      	ldrb	r3, [r3, #2]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	d813      	bhi.n	800166a <Track_updateSteps+0x64>
			{
				++track->_nbSteps;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	789b      	ldrb	r3, [r3, #2]
 8001646:	3301      	adds	r3, #1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	709a      	strb	r2, [r3, #2]
			}
			break;
 800164e:	e00c      	b.n	800166a <Track_updateSteps+0x64>
		case GPIO_PIN_RESET:
			if(track->_nbSteps > MIN_SEQUENCER_STEPS)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d90a      	bls.n	800166e <Track_updateSteps+0x68>
			{
				--track->_nbSteps;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	3b01      	subs	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001664:	e003      	b.n	800166e <Track_updateSteps+0x68>
		default:
			break;
 8001666:	bf00      	nop
 8001668:	e002      	b.n	8001670 <Track_updateSteps+0x6a>
			break;
 800166a:	bf00      	nop
 800166c:	e000      	b.n	8001670 <Track_updateSteps+0x6a>
			break;
 800166e:	bf00      	nop
		}
		Track_updatePattern(track, track->_nbSteps, track->_nbHits);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7899      	ldrb	r1, [r3, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	461a      	mov	r2, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff8c 	bl	8001598 <Track_updatePattern>
	}
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <Track_updateHits>:

void Track_updateHits(Track* track, uint16_t pin)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
	if(pin == track->_ROTA.Pin)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8b9b      	ldrh	r3, [r3, #28]
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	429a      	cmp	r2, r3
 800169c:	d133      	bne.n	8001706 <Track_updateHits+0x7e>
	{
		uint8_t pinState = HAL_GPIO_ReadPin(track->_ROTB.Port, track->_ROTB.Pin);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f003 fb5b 	bl	8004d64 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
		switch(pinState)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00e      	beq.n	80016d6 <Track_updateHits+0x4e>
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d117      	bne.n	80016ec <Track_updateHits+0x64>
		{
		case GPIO_PIN_SET:
			if(track->_nbHits < track->_nbSteps)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	791a      	ldrb	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d213      	bcs.n	80016f0 <Track_updateHits+0x68>
			{
				++track->_nbHits;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	791b      	ldrb	r3, [r3, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	711a      	strb	r2, [r3, #4]
			}
			break;
 80016d4:	e00c      	b.n	80016f0 <Track_updateHits+0x68>
		case GPIO_PIN_RESET:
			if(track->_nbHits > MIN_SEQUENCER_STEPS)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d90a      	bls.n	80016f4 <Track_updateHits+0x6c>
			{
				--track->_nbHits;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	711a      	strb	r2, [r3, #4]
			}
			break;
 80016ea:	e003      	b.n	80016f4 <Track_updateHits+0x6c>
		default:
			break;
 80016ec:	bf00      	nop
 80016ee:	e002      	b.n	80016f6 <Track_updateHits+0x6e>
			break;
 80016f0:	bf00      	nop
 80016f2:	e000      	b.n	80016f6 <Track_updateHits+0x6e>
			break;
 80016f4:	bf00      	nop
		}
		Track_updatePattern(track, track->_nbSteps, track->_nbHits);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7899      	ldrb	r1, [r3, #2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	791b      	ldrb	r3, [r3, #4]
 80016fe:	461a      	mov	r2, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff49 	bl	8001598 <Track_updatePattern>
	}
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <Track_offsetPattern>:

void Track_offsetPattern(Track* track, uint16_t pin)
{
 800170e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001710:	b087      	sub	sp, #28
 8001712:	af04      	add	r7, sp, #16
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]

	if(pin == track->_ROTA.Pin)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	8b9b      	ldrh	r3, [r3, #28]
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	429a      	cmp	r2, r3
 8001722:	d131      	bne.n	8001788 <Track_offsetPattern+0x7a>
	{
		track->_pattern = ((track->_pattern - ((track->_pattern >> 1 ) << 1)) << (track->_nbSteps - 1)) | (track->_pattern >> 1 );
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	1ad2      	subs	r2, r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	789b      	ldrb	r3, [r3, #2]
 800173a:	3b01      	subs	r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	b29b      	uxth	r3, r3
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	801a      	strh	r2, [r3, #0]
		DisplayPattern(track->_pattern, track->_nbSteps, track->_CLK, track->_PATTERN, track->_LATCH);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	881c      	ldrh	r4, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	789d      	ldrb	r5, [r3, #2]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	ae02      	add	r6, sp, #8
 8001764:	3230      	adds	r2, #48	; 0x30
 8001766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800176a:	e886 0003 	stmia.w	r6, {r0, r1}
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	466e      	mov	r6, sp
 8001772:	3240      	adds	r2, #64	; 0x40
 8001774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001778:	e886 0003 	stmia.w	r6, {r0, r1}
 800177c:	3338      	adds	r3, #56	; 0x38
 800177e:	cb0c      	ldmia	r3, {r2, r3}
 8001780:	4629      	mov	r1, r5
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff fa2e 	bl	8000be4 <DisplayPattern>
	}
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001790 <Track_updateSubdivision>:

void Track_updateSubdivision(Track* track, uint16_t pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
	if(pin == track->_ROTA.Pin)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8b9b      	ldrh	r3, [r3, #28]
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d138      	bne.n	8001818 <Track_updateSubdivision+0x88>
	{
		uint8_t pinState = HAL_GPIO_ReadPin(track->_ROTB.Port, track->_ROTB.Pin);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f003 fad7 	bl	8004d64 <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]
		switch(pinState)
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d014      	beq.n	80017ea <Track_updateSubdivision+0x5a>
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d125      	bne.n	8001810 <Track_updateSubdivision+0x80>
		{
		case GPIO_PIN_SET: // encoder turns clockwise : increments subdivision
			switch(track->_sub)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	795b      	ldrb	r3, [r3, #5]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d005      	beq.n	80017d8 <Track_updateSubdivision+0x48>
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <Track_updateSubdivision+0x50>
			{
			case E_NOIRE:
				track->_sub = E_CROCHE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	715a      	strb	r2, [r3, #5]
				break;
 80017d6:	e007      	b.n	80017e8 <Track_updateSubdivision+0x58>
			case E_CROCHE:
				track->_sub = E_D_CROCHE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	715a      	strb	r2, [r3, #5]
				break;
 80017de:	e003      	b.n	80017e8 <Track_updateSubdivision+0x58>
			default:
				track->_sub = E_NOIRE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	715a      	strb	r2, [r3, #5]
				break;
 80017e6:	bf00      	nop
			}
			break;
 80017e8:	e016      	b.n	8001818 <Track_updateSubdivision+0x88>
		case GPIO_PIN_RESET: // encode turns counterclockwise : decrements subdivision
			switch(track->_sub)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	795b      	ldrb	r3, [r3, #5]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d005      	beq.n	80017fe <Track_updateSubdivision+0x6e>
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d107      	bne.n	8001806 <Track_updateSubdivision+0x76>
			{
			case E_CROCHE:
				track->_sub = E_NOIRE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2204      	movs	r2, #4
 80017fa:	715a      	strb	r2, [r3, #5]
				break;
 80017fc:	e007      	b.n	800180e <Track_updateSubdivision+0x7e>
			case  E_D_CROCHE:
				track->_sub = E_CROCHE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2202      	movs	r2, #2
 8001802:	715a      	strb	r2, [r3, #5]
				break;
 8001804:	e003      	b.n	800180e <Track_updateSubdivision+0x7e>
			default:
				track->_sub = E_D_CROCHE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	715a      	strb	r2, [r3, #5]
				break;
 800180c:	bf00      	nop
			}
			break;
 800180e:	e003      	b.n	8001818 <Track_updateSubdivision+0x88>
		default:
			track->_sub = E_NOIRE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	715a      	strb	r2, [r3, #5]
			break;
 8001816:	bf00      	nop
		}
	}
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <Track_TogglePin>:

void Track_TogglePin(Track* track, bool toggle)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
	if(toggle)
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d032      	beq.n	8001898 <Track_TogglePin+0x78>
	{
		HAL_GPIO_WritePin(track->_TRIGOUT.Port, track->_TRIGOUT.Pin, track->_TrigNextBeat);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6898      	ldr	r0, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	8999      	ldrh	r1, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	799b      	ldrb	r3, [r3, #6]
 800183e:	461a      	mov	r2, r3
 8001840:	f003 faa8 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(track->_BPMOUT.Port, track->_BPMOUT.Pin, GPIO_PIN_SET);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6918      	ldr	r0, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8a9b      	ldrh	r3, [r3, #20]
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	f003 faa0 	bl	8004d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(track->_CHASER.Port, track->_CHASER.Pin, Utils_boolToPinState(track->_currentStep==1));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	78db      	ldrb	r3, [r3, #3]
 8001860:	2b01      	cmp	r3, #1
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f8be 	bl	80019ec <Utils_boolToPinState>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4629      	mov	r1, r5
 8001876:	4620      	mov	r0, r4
 8001878:	f003 fa8c 	bl	8004d94 <HAL_GPIO_WritePin>
		track->_currentStep = track->_currentStep < track->_nbSteps ? (track->_currentStep + 1) : 1;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	78da      	ldrb	r2, [r3, #3]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	429a      	cmp	r2, r3
 8001886:	d204      	bcs.n	8001892 <Track_TogglePin+0x72>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	78db      	ldrb	r3, [r3, #3]
 800188c:	3301      	adds	r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	e000      	b.n	8001894 <Track_TogglePin+0x74>
 8001892:	2201      	movs	r2, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	70da      	strb	r2, [r3, #3]
	}
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bdb0      	pop	{r4, r5, r7, pc}

080018a0 <Utils_concatenatePatterns>:
#include "Utils.h"



void Utils_concatenatePatterns(uint16_t* patternA, const uint8_t* patternB)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	*patternA = (*patternA << ((int)floor(log2((double)(*patternB)))+1)) | *patternB;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	461c      	mov	r4, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdc9 	bl	800044c <__aeabi_ui2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b10 	vmov	d0, r2, r3
 80018c2:	f005 f8f1 	bl	8006aa8 <log>
 80018c6:	ec51 0b10 	vmov	r0, r1, d0
 80018ca:	a313      	add	r3, pc, #76	; (adr r3, 8001918 <Utils_concatenatePatterns+0x78>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe ff60 	bl	8000794 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	ec43 2b17 	vmov	d7, r2, r3
 80018dc:	eeb0 0a47 	vmov.f32	s0, s14
 80018e0:	eef0 0a67 	vmov.f32	s1, s15
 80018e4:	f005 f928 	bl	8006b38 <floor>
 80018e8:	ec53 2b10 	vmov	r2, r3, d0
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f8d6 	bl	8000aa0 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3301      	adds	r3, #1
 80018f8:	fa04 f303 	lsl.w	r3, r4, r3
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b21b      	sxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b21b      	sxth	r3, r3
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	801a      	strh	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}
 8001916:	bf00      	nop
 8001918:	fefa39ef 	.word	0xfefa39ef
 800191c:	3fe62e42 	.word	0x3fe62e42

08001920 <Utils_computePattern>:

uint16_t Utils_computePattern(uint8_t nbSteps, uint8_t nbHits)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
	if (nbHits > nbSteps)
 8001930:	79ba      	ldrb	r2, [r7, #6]
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	429a      	cmp	r2, r3
 8001936:	d901      	bls.n	800193c <Utils_computePattern+0x1c>
		nbHits = nbSteps;
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	71bb      	strb	r3, [r7, #6]

	//Each iteration is a process of pairing strings X and Y and the remainder from the pairings
	//X will hold the "dominant" pair (the pair that there are more of)
	uint8_t A_pattern = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	74bb      	strb	r3, [r7, #18]
	uint8_t A_length = nbHits;
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	77fb      	strb	r3, [r7, #31]
	uint8_t B_pattern = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	747b      	strb	r3, [r7, #17]
	uint8_t B_length = nbSteps - nbHits;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	77bb      	strb	r3, [r7, #30]

	do
	{
		// New dominant pattern
		uint8_t temp_pattern = B_pattern;
 8001950:	7c7b      	ldrb	r3, [r7, #17]
 8001952:	737b      	strb	r3, [r7, #13]

		//Check which is the dominant pair
		if (A_length >= B_length)
 8001954:	7ffa      	ldrb	r2, [r7, #31]
 8001956:	7fbb      	ldrb	r3, [r7, #30]
 8001958:	429a      	cmp	r2, r3
 800195a:	d30a      	bcc.n	8001972 <Utils_computePattern+0x52>
		{
			//Set the new number of pairs for X and Y
			uint8_t A_length_temp = A_length;
 800195c:	7ffb      	ldrb	r3, [r7, #31]
 800195e:	74fb      	strb	r3, [r7, #19]
			A_length = B_length;
 8001960:	7fbb      	ldrb	r3, [r7, #30]
 8001962:	77fb      	strb	r3, [r7, #31]
			B_length = A_length_temp - B_length;
 8001964:	7cfa      	ldrb	r2, [r7, #19]
 8001966:	7fbb      	ldrb	r3, [r7, #30]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	77bb      	strb	r3, [r7, #30]

			//The previous dominant pair becomes the new non dominant pair
			B_pattern = A_pattern;
 800196c:	7cbb      	ldrb	r3, [r7, #18]
 800196e:	747b      	strb	r3, [r7, #17]
 8001970:	e003      	b.n	800197a <Utils_computePattern+0x5a>
		}
		else
		{
			B_length -= A_length;
 8001972:	7fba      	ldrb	r2, [r7, #30]
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	77bb      	strb	r3, [r7, #30]
		}
		Utils_concatenatePatterns((uint16_t*)&A_pattern, &temp_pattern);
 800197a:	f107 020d 	add.w	r2, r7, #13
 800197e:	f107 0312 	add.w	r3, r7, #18
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff8b 	bl	80018a0 <Utils_concatenatePatterns>
	} while (A_length > 1 && B_length > 1);//iterate as long as the non dominant pair can be paired (if there is 1 Y left, all we can do is pair it with however many Xs are left, so we're done)
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d902      	bls.n	8001996 <Utils_computePattern+0x76>
 8001990:	7fbb      	ldrb	r3, [r7, #30]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d8dc      	bhi.n	8001950 <Utils_computePattern+0x30>

	//By this point, we have strings X and Y formed through a series of pairings of the initial strings "1" and "0"
	//X is the final dominant pair and Y is the second to last dominant pair
	uint16_t pattern = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	81fb      	strh	r3, [r7, #14]
	for (int i = 1; i <= A_length; i++)
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e00a      	b.n	80019b6 <Utils_computePattern+0x96>
		Utils_concatenatePatterns(&pattern, &A_pattern);
 80019a0:	f107 0212 	add.w	r2, r7, #18
 80019a4:	f107 030e 	add.w	r3, r7, #14
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff78 	bl	80018a0 <Utils_concatenatePatterns>
	for (int i = 1; i <= A_length; i++)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	3301      	adds	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	ddf0      	ble.n	80019a0 <Utils_computePattern+0x80>
	for (int i = 1; i <= B_length; i++)
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e00a      	b.n	80019da <Utils_computePattern+0xba>
		Utils_concatenatePatterns(&pattern, &B_pattern);
 80019c4:	f107 0211 	add.w	r2, r7, #17
 80019c8:	f107 030e 	add.w	r3, r7, #14
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff66 	bl	80018a0 <Utils_concatenatePatterns>
	for (int i = 1; i <= B_length; i++)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	7fbb      	ldrb	r3, [r7, #30]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	429a      	cmp	r2, r3
 80019e0:	ddf0      	ble.n	80019c4 <Utils_computePattern+0xa4>
	return pattern;
 80019e2:	89fb      	ldrh	r3, [r7, #14]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <Utils_boolToPinState>:

GPIO_PinState Utils_boolToPinState(bool value)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	return value ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80019f6:	79fb      	ldrb	r3, [r7, #7]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001a0a:	af44      	add	r7, sp, #272	; 0x110
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0c:	f001 f84c 	bl	8002aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a10:	f000 f9de 	bl	8001dd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a14:	f000 fa2e 	bl	8001e74 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a18:	f000 fbda 	bl	80021d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a1c:	f000 fba2 	bl	8002164 <MX_DMA_Init>
  MX_TIM6_Init();
 8001a20:	f000 fb6a 	bl	80020f8 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001a24:	f000 fa52 	bl	8001ecc <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a28:	f000 fb2a 	bl	8002080 <MX_DAC1_Init>
  MX_ADC2_Init();
 8001a2c:	f000 fac4 	bl	8001fb8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GPIOs[0].TRIGOUT = (GPIO_PinPort){TRIG_T1_GPIO_Port, TRIG_T1_Pin};
 8001a30:	4bbc      	ldr	r3, [pc, #752]	; (8001d24 <main+0x320>)
 8001a32:	4abd      	ldr	r2, [pc, #756]	; (8001d28 <main+0x324>)
 8001a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a38:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].ROTA = (GPIO_PinPort){ROTA_T1_GPIO_Port, ROTA_T1_Pin};
 8001a3c:	4bb9      	ldr	r3, [pc, #740]	; (8001d24 <main+0x320>)
 8001a3e:	4abb      	ldr	r2, [pc, #748]	; (8001d2c <main+0x328>)
 8001a40:	3308      	adds	r3, #8
 8001a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a46:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].ROTB = (GPIO_PinPort){ROTB_T1_GPIO_Port, ROTB_T1_Pin};
 8001a4a:	4bb6      	ldr	r3, [pc, #728]	; (8001d24 <main+0x320>)
 8001a4c:	4ab8      	ldr	r2, [pc, #736]	; (8001d30 <main+0x32c>)
 8001a4e:	3310      	adds	r3, #16
 8001a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a54:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].CHASER = (GPIO_PinPort){CCLR_T1_GPIO_Port, CCLR_T1_Pin};
 8001a58:	4bb2      	ldr	r3, [pc, #712]	; (8001d24 <main+0x320>)
 8001a5a:	4ab6      	ldr	r2, [pc, #728]	; (8001d34 <main+0x330>)
 8001a5c:	3318      	adds	r3, #24
 8001a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a62:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].BPMOUT = (GPIO_PinPort){CCLK_T1_GPIO_Port, CCLK_T1_Pin};
 8001a66:	4baf      	ldr	r3, [pc, #700]	; (8001d24 <main+0x320>)
 8001a68:	4ab3      	ldr	r2, [pc, #716]	; (8001d38 <main+0x334>)
 8001a6a:	3320      	adds	r3, #32
 8001a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a70:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].LATCH = (GPIO_PinPort){RCLK_T1_GPIO_Port, RCLK_T1_Pin};
 8001a74:	4bab      	ldr	r3, [pc, #684]	; (8001d24 <main+0x320>)
 8001a76:	4ab1      	ldr	r2, [pc, #708]	; (8001d3c <main+0x338>)
 8001a78:	3328      	adds	r3, #40	; 0x28
 8001a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a7e:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].CLK = (GPIO_PinPort){SRCLK_T1_GPIO_Port, SRCLK_T1_Pin};
 8001a82:	4ba8      	ldr	r3, [pc, #672]	; (8001d24 <main+0x320>)
 8001a84:	4aae      	ldr	r2, [pc, #696]	; (8001d40 <main+0x33c>)
 8001a86:	3330      	adds	r3, #48	; 0x30
 8001a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8c:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[0].PATTERN = (GPIO_PinPort){SER_T1_GPIO_Port, SER_T1_Pin};
 8001a90:	4ba4      	ldr	r3, [pc, #656]	; (8001d24 <main+0x320>)
 8001a92:	4aac      	ldr	r2, [pc, #688]	; (8001d44 <main+0x340>)
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a9a:	e883 0003 	stmia.w	r3, {r0, r1}

  GPIOs[1].TRIGOUT = (GPIO_PinPort){TRIG_T2_GPIO_Port, TRIG_T2_Pin};
 8001a9e:	4ba1      	ldr	r3, [pc, #644]	; (8001d24 <main+0x320>)
 8001aa0:	4aa9      	ldr	r2, [pc, #676]	; (8001d48 <main+0x344>)
 8001aa2:	3340      	adds	r3, #64	; 0x40
 8001aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa8:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].ROTA = (GPIO_PinPort){ROTA_T2_GPIO_Port, ROTA_T2_Pin};
 8001aac:	4b9d      	ldr	r3, [pc, #628]	; (8001d24 <main+0x320>)
 8001aae:	4aa7      	ldr	r2, [pc, #668]	; (8001d4c <main+0x348>)
 8001ab0:	3348      	adds	r3, #72	; 0x48
 8001ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab6:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].ROTB = (GPIO_PinPort){ROTB_T2_GPIO_Port, ROTB_T2_Pin};
 8001aba:	4b9a      	ldr	r3, [pc, #616]	; (8001d24 <main+0x320>)
 8001abc:	4aa4      	ldr	r2, [pc, #656]	; (8001d50 <main+0x34c>)
 8001abe:	3350      	adds	r3, #80	; 0x50
 8001ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac4:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].CHASER = (GPIO_PinPort){CCLR_T2_GPIO_Port, CCLR_T2_Pin};
 8001ac8:	4b96      	ldr	r3, [pc, #600]	; (8001d24 <main+0x320>)
 8001aca:	4aa2      	ldr	r2, [pc, #648]	; (8001d54 <main+0x350>)
 8001acc:	3358      	adds	r3, #88	; 0x58
 8001ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad2:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].BPMOUT = (GPIO_PinPort){CCLK_T2_GPIO_Port, CCLK_T2_Pin};
 8001ad6:	4b93      	ldr	r3, [pc, #588]	; (8001d24 <main+0x320>)
 8001ad8:	4a9f      	ldr	r2, [pc, #636]	; (8001d58 <main+0x354>)
 8001ada:	3360      	adds	r3, #96	; 0x60
 8001adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae0:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].LATCH = (GPIO_PinPort){RCLK_T2_GPIO_Port, RCLK_T2_Pin};
 8001ae4:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <main+0x320>)
 8001ae6:	4a9d      	ldr	r2, [pc, #628]	; (8001d5c <main+0x358>)
 8001ae8:	3368      	adds	r3, #104	; 0x68
 8001aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aee:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].CLK = (GPIO_PinPort){SRCLK_T2_GPIO_Port, SRCLK_T2_Pin};
 8001af2:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <main+0x320>)
 8001af4:	4a9a      	ldr	r2, [pc, #616]	; (8001d60 <main+0x35c>)
 8001af6:	3370      	adds	r3, #112	; 0x70
 8001af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001afc:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[1].PATTERN = (GPIO_PinPort){SER_T2_GPIO_Port, SER_T2_Pin};
 8001b00:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <main+0x320>)
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <main+0x360>)
 8001b04:	3378      	adds	r3, #120	; 0x78
 8001b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b0a:	e883 0003 	stmia.w	r3, {r0, r1}

  GPIOs[2].TRIGOUT = (GPIO_PinPort){TRIG_T3_GPIO_Port, TRIG_T3_Pin};
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <main+0x320>)
 8001b10:	4a95      	ldr	r2, [pc, #596]	; (8001d68 <main+0x364>)
 8001b12:	3380      	adds	r3, #128	; 0x80
 8001b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b18:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].ROTA = (GPIO_PinPort){ROTA_T3_GPIO_Port, ROTA_T3_Pin};
 8001b1c:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <main+0x320>)
 8001b1e:	4a93      	ldr	r2, [pc, #588]	; (8001d6c <main+0x368>)
 8001b20:	3388      	adds	r3, #136	; 0x88
 8001b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b26:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].ROTB = (GPIO_PinPort){ROTB_T3_GPIO_Port, ROTB_T3_Pin};
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <main+0x320>)
 8001b2c:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <main+0x36c>)
 8001b2e:	3390      	adds	r3, #144	; 0x90
 8001b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b34:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].CHASER = (GPIO_PinPort){CCLR_T3_GPIO_Port, CCLR_T3_Pin};
 8001b38:	4b7a      	ldr	r3, [pc, #488]	; (8001d24 <main+0x320>)
 8001b3a:	4a8e      	ldr	r2, [pc, #568]	; (8001d74 <main+0x370>)
 8001b3c:	3398      	adds	r3, #152	; 0x98
 8001b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b42:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].BPMOUT = (GPIO_PinPort){CCLK_T3_GPIO_Port, CCLK_T3_Pin};
 8001b46:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <main+0x320>)
 8001b48:	4a8b      	ldr	r2, [pc, #556]	; (8001d78 <main+0x374>)
 8001b4a:	33a0      	adds	r3, #160	; 0xa0
 8001b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b50:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].LATCH = (GPIO_PinPort){RCLK_T3_GPIO_Port, RCLK_T3_Pin};
 8001b54:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <main+0x320>)
 8001b56:	4a89      	ldr	r2, [pc, #548]	; (8001d7c <main+0x378>)
 8001b58:	33a8      	adds	r3, #168	; 0xa8
 8001b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5e:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].CLK = (GPIO_PinPort){SRCLK_T3_GPIO_Port, SRCLK_T3_Pin};
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <main+0x320>)
 8001b64:	4a86      	ldr	r2, [pc, #536]	; (8001d80 <main+0x37c>)
 8001b66:	33b0      	adds	r3, #176	; 0xb0
 8001b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b6c:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIOs[2].PATTERN = (GPIO_PinPort){SER_T2_GPIO_Port, SER_T2_Pin};
 8001b70:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <main+0x320>)
 8001b72:	4a7c      	ldr	r2, [pc, #496]	; (8001d64 <main+0x360>)
 8001b74:	33b8      	adds	r3, #184	; 0xb8
 8001b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7a:	e883 0003 	stmia.w	r3, {r0, r1}
  //Seq_computeTriggers(&seq);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Seq_initSequencer(&seq, (GPIO_PinPort){SW_T123_GPIO_Port, SW_T123_Pin}, (GPIO_PinPort){ROTA_BPM_GPIO_Port, ROTA_BPM_Pin},
 8001b7e:	4a81      	ldr	r2, [pc, #516]	; (8001d84 <main+0x380>)
 8001b80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b88:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b8c:	4a7e      	ldr	r2, [pc, #504]	; (8001d88 <main+0x384>)
 8001b8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b96:	e883 0003 	stmia.w	r3, {r0, r1}
		  (GPIO_PinPort){ROTB_BPM_GPIO_Port, ROTB_BPM_Pin}, (GPIO_PinPort){TRIG_BPM_GPIO_Port, TRIG_BPM_Pin},
 8001b9a:	4a7c      	ldr	r2, [pc, #496]	; (8001d8c <main+0x388>)
 8001b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba4:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ba8:	4a79      	ldr	r2, [pc, #484]	; (8001d90 <main+0x38c>)
 8001baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bb2:	e883 0003 	stmia.w	r3, {r0, r1}
		  (GPIO_PinPort){DISP_BPM_GPIO_Port, DISP_BPM_Pin}, (GPIO_PinPort){DISP_MODE_GPIO_Port, DISP_MODE_Pin},
 8001bb6:	4a77      	ldr	r2, [pc, #476]	; (8001d94 <main+0x390>)
 8001bb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8001bc4:	4a74      	ldr	r2, [pc, #464]	; (8001d98 <main+0x394>)
 8001bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bce:	e883 0003 	stmia.w	r3, {r0, r1}
  Seq_initSequencer(&seq, (GPIO_PinPort){SW_T123_GPIO_Port, SW_T123_Pin}, (GPIO_PinPort){ROTA_BPM_GPIO_Port, ROTA_BPM_Pin},
 8001bd2:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <main+0x320>)
 8001bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8001bd6:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <main+0x398>)
 8001bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8001bda:	aa07      	add	r2, sp, #28
 8001bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be4:	e882 0003 	stmia.w	r2, {r0, r1}
 8001be8:	aa05      	add	r2, sp, #20
 8001bea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bf2:	e882 0003 	stmia.w	r2, {r0, r1}
 8001bf6:	aa03      	add	r2, sp, #12
 8001bf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c00:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c04:	aa01      	add	r2, sp, #4
 8001c06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c1c:	ca06      	ldmia	r2, {r1, r2}
 8001c1e:	4860      	ldr	r0, [pc, #384]	; (8001da0 <main+0x39c>)
 8001c20:	f7ff f850 	bl	8000cc4 <Seq_initSequencer>
		  &htim6, GPIOs);
  CVSeq_initCVSequencer(&CVSeq1, (GPIO_PinPort){TEMPO_CVSEQ1_GPIO_Port, TEMPO_CVSEQ1_Pin}, &hadc1, &hdac1, DAC_CHANNEL_2,
 8001c24:	4a5f      	ldr	r2, [pc, #380]	; (8001da4 <main+0x3a0>)
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c2e:	e883 0003 	stmia.w	r3, {r0, r1}
		  (GPIO_PinPort){SW_CVSEQ1_GPIO_Port, SW_CVSEQ1_Pin}, (GPIO_PinPort){DISP_CVSEQ1_GPIO_Port, DISP_CVSEQ1_Pin});
 8001c32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c3a:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <main+0x3a4>)
 8001c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c40:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c4c:	4a57      	ldr	r2, [pc, #348]	; (8001dac <main+0x3a8>)
 8001c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c52:	e883 0003 	stmia.w	r3, {r0, r1}
  CVSeq_initCVSequencer(&CVSeq1, (GPIO_PinPort){TEMPO_CVSEQ1_GPIO_Port, TEMPO_CVSEQ1_Pin}, &hadc1, &hdac1, DAC_CHANNEL_2,
 8001c56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c5a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001c5e:	ab04      	add	r3, sp, #16
 8001c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c64:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c6c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001c70:	ab02      	add	r3, sp, #8
 8001c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c76:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <main+0x3ac>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <main+0x3b0>)
 8001c84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c88:	ca06      	ldmia	r2, {r1, r2}
 8001c8a:	484b      	ldr	r0, [pc, #300]	; (8001db8 <main+0x3b4>)
 8001c8c:	f7fe ff30 	bl	8000af0 <CVSeq_initCVSequencer>
  CVSeq_initCVSequencer(&CVSeq2, (GPIO_PinPort){TEMPO_CVSEQ2_GPIO_Port, TEMPO_CVSEQ2_Pin}, &hadc2, &hdac1, DAC_CHANNEL_1,
 8001c90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <main+0x3b8>)
 8001c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c9e:	e883 0003 	stmia.w	r3, {r0, r1}
		  (GPIO_PinPort){SW_CVSEQ2_GPIO_Port, SW_CVSEQ2_Pin}, (GPIO_PinPort){DISP_CVSEQ2_GPIO_Port, DISP_CVSEQ2_Pin});
 8001ca2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ca6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001caa:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <main+0x3bc>)
 8001cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cbc:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <main+0x3c0>)
 8001cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc2:	e883 0003 	stmia.w	r3, {r0, r1}
  CVSeq_initCVSequencer(&CVSeq2, (GPIO_PinPort){TEMPO_CVSEQ2_GPIO_Port, TEMPO_CVSEQ2_Pin}, &hadc2, &hdac1, DAC_CHANNEL_1,
 8001cc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cca:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001cce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cd2:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001cd6:	ab04      	add	r3, sp, #16
 8001cd8:	c903      	ldmia	r1, {r0, r1}
 8001cda:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ce2:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8001ce6:	ab02      	add	r3, sp, #8
 8001ce8:	c903      	ldmia	r1, {r0, r1}
 8001cea:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <main+0x3ac>)
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <main+0x3c4>)
 8001cf8:	ca06      	ldmia	r2, {r1, r2}
 8001cfa:	4834      	ldr	r0, [pc, #208]	; (8001dcc <main+0x3c8>)
 8001cfc:	f7fe fef8 	bl	8000af0 <CVSeq_initCVSequencer>
  while (1)
  {
	  Seq_computeTriggers(&seq);
 8001d00:	4827      	ldr	r0, [pc, #156]	; (8001da0 <main+0x39c>)
 8001d02:	f7ff fa0d 	bl	8001120 <Seq_computeTriggers>
	  Seq_resetTriggers(seq);
 8001d06:	4c26      	ldr	r4, [pc, #152]	; (8001da0 <main+0x39c>)
 8001d08:	4668      	mov	r0, sp
 8001d0a:	f104 0310 	add.w	r3, r4, #16
 8001d0e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001d12:	4619      	mov	r1, r3
 8001d14:	f004 feba 	bl	8006a8c <memcpy>
 8001d18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d1c:	f7ff fb4e 	bl	80013bc <Seq_resetTriggers>
	  Seq_computeTriggers(&seq);
 8001d20:	e7ee      	b.n	8001d00 <main+0x2fc>
 8001d22:	bf00      	nop
 8001d24:	200003dc 	.word	0x200003dc
 8001d28:	08006fc4 	.word	0x08006fc4
 8001d2c:	08006fcc 	.word	0x08006fcc
 8001d30:	08006fd4 	.word	0x08006fd4
 8001d34:	08006fdc 	.word	0x08006fdc
 8001d38:	08006fe4 	.word	0x08006fe4
 8001d3c:	08006fec 	.word	0x08006fec
 8001d40:	08006ff4 	.word	0x08006ff4
 8001d44:	08006ffc 	.word	0x08006ffc
 8001d48:	08007004 	.word	0x08007004
 8001d4c:	0800700c 	.word	0x0800700c
 8001d50:	08007014 	.word	0x08007014
 8001d54:	0800701c 	.word	0x0800701c
 8001d58:	08007024 	.word	0x08007024
 8001d5c:	0800702c 	.word	0x0800702c
 8001d60:	08007034 	.word	0x08007034
 8001d64:	0800703c 	.word	0x0800703c
 8001d68:	08007044 	.word	0x08007044
 8001d6c:	0800704c 	.word	0x0800704c
 8001d70:	08007054 	.word	0x08007054
 8001d74:	0800705c 	.word	0x0800705c
 8001d78:	08007064 	.word	0x08007064
 8001d7c:	0800706c 	.word	0x0800706c
 8001d80:	08007074 	.word	0x08007074
 8001d84:	0800707c 	.word	0x0800707c
 8001d88:	08007084 	.word	0x08007084
 8001d8c:	0800708c 	.word	0x0800708c
 8001d90:	08007094 	.word	0x08007094
 8001d94:	0800709c 	.word	0x0800709c
 8001d98:	080070a4 	.word	0x080070a4
 8001d9c:	20000274 	.word	0x20000274
 8001da0:	200002c0 	.word	0x200002c0
 8001da4:	080070ac 	.word	0x080070ac
 8001da8:	080070b4 	.word	0x080070b4
 8001dac:	080070bc 	.word	0x080070bc
 8001db0:	200001d0 	.word	0x200001d0
 8001db4:	20000078 	.word	0x20000078
 8001db8:	2000049c 	.word	0x2000049c
 8001dbc:	080070c4 	.word	0x080070c4
 8001dc0:	080070cc 	.word	0x080070cc
 8001dc4:	080070d4 	.word	0x080070d4
 8001dc8:	200000dc 	.word	0x200000dc
 8001dcc:	200004c8 	.word	0x200004c8

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b096      	sub	sp, #88	; 0x58
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2244      	movs	r2, #68	; 0x44
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fe22 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001df2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001df6:	f003 f80b 	bl	8004e10 <HAL_PWREx_ControlVoltageScaling>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e00:	f000 fb90 	bl	8002524 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e04:	2302      	movs	r3, #2
 8001e06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e12:	2302      	movs	r3, #2
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e16:	2302      	movs	r3, #2
 8001e18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e22:	2307      	movs	r3, #7
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e26:	2302      	movs	r3, #2
 8001e28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 f842 	bl	8004ebc <HAL_RCC_OscConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001e3e:	f000 fb71 	bl	8002524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e42:	230f      	movs	r3, #15
 8001e44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	2303      	movs	r3, #3
 8001e48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001e4e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fc09 	bl	8005674 <HAL_RCC_ClockConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e68:	f000 fb5c 	bl	8002524 <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3758      	adds	r7, #88	; 0x58
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0a2      	sub	sp, #136	; 0x88
 8001e78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	2288      	movs	r2, #136	; 0x88
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fdd1 	bl	8006a28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e8a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e90:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001e92:	2302      	movs	r3, #2
 8001e94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eae:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fdca 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001ebe:	f000 fb31 	bl	8002524 <Error_Handler>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3788      	adds	r7, #136	; 0x88
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001ef0:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <MX_ADC1_Init+0xe4>)
 8001ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f0e:	2204      	movs	r2, #4
 8001f10:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f4e:	4817      	ldr	r0, [pc, #92]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f50:	f001 f820 	bl	8002f94 <HAL_ADC_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001f5a:	f000 fae3 	bl	8002524 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4810      	ldr	r0, [pc, #64]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f6a:	f001 ff6f 	bl	8003e4c <HAL_ADCEx_MultiModeConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f74:	f000 fad6 	bl	8002524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_ADC1_Init+0xe8>)
 8001f7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f84:	237f      	movs	r3, #127	; 0x7f
 8001f86:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_ADC1_Init+0xe0>)
 8001f96:	f001 fa27 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001fa0:	f000 fac0 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000078 	.word	0x20000078
 8001fb0:	50040000 	.word	0x50040000
 8001fb4:	2e300800 	.word	0x2e300800

08001fb8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <MX_ADC2_Init+0xc0>)
 8001fd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001fee:	2204      	movs	r2, #4
 8001ff0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MX_ADC2_Init+0xbc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_ADC2_Init+0xbc>)
 8002000:	2201      	movs	r2, #1
 8002002:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_ADC2_Init+0xbc>)
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <MX_ADC2_Init+0xbc>)
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_ADC2_Init+0xbc>)
 8002014:	2200      	movs	r2, #0
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <MX_ADC2_Init+0xbc>)
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_ADC2_Init+0xbc>)
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_ADC2_Init+0xbc>)
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800202e:	4811      	ldr	r0, [pc, #68]	; (8002074 <MX_ADC2_Init+0xbc>)
 8002030:	f000 ffb0 	bl	8002f94 <HAL_ADC_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800203a:	f000 fa73 	bl	8002524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_ADC2_Init+0xc4>)
 8002040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002042:	2306      	movs	r3, #6
 8002044:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800204a:	237f      	movs	r3, #127	; 0x7f
 800204c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800204e:	2304      	movs	r3, #4
 8002050:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	4619      	mov	r1, r3
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <MX_ADC2_Init+0xbc>)
 800205c:	f001 f9c4 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8002066:	f000 fa5d 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200000dc 	.word	0x200000dc
 8002078:	50040100 	.word	0x50040100
 800207c:	08600004 	.word	0x08600004

08002080 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2224      	movs	r2, #36	; 0x24
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fccb 	bl	8006a28 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <MX_DAC1_Init+0x70>)
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <MX_DAC1_Init+0x74>)
 8002096:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002098:	4815      	ldr	r0, [pc, #84]	; (80020f0 <MX_DAC1_Init+0x70>)
 800209a:	f002 f898 	bl	80041ce <HAL_DAC_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80020a4:	f000 fa3e 	bl	8002524 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	4619      	mov	r1, r3
 80020c2:	480b      	ldr	r0, [pc, #44]	; (80020f0 <MX_DAC1_Init+0x70>)
 80020c4:	f002 f97b 	bl	80043be <HAL_DAC_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 fa29 	bl	8002524 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	2210      	movs	r2, #16
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_DAC1_Init+0x70>)
 80020da:	f002 f970 	bl	80043be <HAL_DAC_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80020e4:	f000 fa1e 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200001d0 	.word	0x200001d0
 80020f4:	40007400 	.word	0x40007400

080020f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_TIM6_Init+0x64>)
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <MX_TIM6_Init+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 114;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_TIM6_Init+0x64>)
 8002110:	2272      	movs	r2, #114	; 0x72
 8002112:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_TIM6_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_TIM6_Init+0x64>)
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_TIM6_Init+0x64>)
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <MX_TIM6_Init+0x64>)
 800212a:	f004 f94b 	bl	80063c4 <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002134:	f000 f9f6 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002138:	2320      	movs	r3, #32
 800213a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_TIM6_Init+0x64>)
 8002146:	f004 fbc9 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002150:	f000 f9e8 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000274 	.word	0x20000274
 8002160:	40001000 	.word	0x40001000

08002164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_DMA_Init+0x68>)
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <MX_DMA_Init+0x68>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6493      	str	r3, [r2, #72]	; 0x48
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_DMA_Init+0x68>)
 8002178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	200b      	movs	r0, #11
 8002188:	f001 ffeb 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800218c:	200b      	movs	r0, #11
 800218e:	f002 f804 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	200c      	movs	r0, #12
 8002198:	f001 ffe3 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800219c:	200c      	movs	r0, #12
 800219e:	f001 fffc 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	200d      	movs	r0, #13
 80021a8:	f001 ffdb 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021ac:	200d      	movs	r0, #13
 80021ae:	f001 fff4 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	200e      	movs	r0, #14
 80021b8:	f001 ffd3 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80021bc:	200e      	movs	r0, #14
 80021be:	f001 ffec 	bl	800419a <HAL_NVIC_EnableIRQ>

}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	4ba3      	ldr	r3, [pc, #652]	; (8002474 <MX_GPIO_Init+0x2a4>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4aa2      	ldr	r2, [pc, #648]	; (8002474 <MX_GPIO_Init+0x2a4>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f2:	4ba0      	ldr	r3, [pc, #640]	; (8002474 <MX_GPIO_Init+0x2a4>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fe:	4b9d      	ldr	r3, [pc, #628]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	4a9c      	ldr	r2, [pc, #624]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220a:	4b9a      	ldr	r3, [pc, #616]	; (8002474 <MX_GPIO_Init+0x2a4>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b97      	ldr	r3, [pc, #604]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	4a96      	ldr	r2, [pc, #600]	; (8002474 <MX_GPIO_Init+0x2a4>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002222:	4b94      	ldr	r3, [pc, #592]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4b91      	ldr	r3, [pc, #580]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a90      	ldr	r2, [pc, #576]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223a:	4b8e      	ldr	r3, [pc, #568]	; (8002474 <MX_GPIO_Init+0x2a4>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	4a8a      	ldr	r2, [pc, #552]	; (8002474 <MX_GPIO_Init+0x2a4>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <MX_GPIO_Init+0x2a4>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RCLK_T3_Pin|SRCLK_T3_Pin, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	2103      	movs	r1, #3
 8002262:	4885      	ldr	r0, [pc, #532]	; (8002478 <MX_GPIO_Init+0x2a8>)
 8002264:	f002 fd96 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RCLK_T2_Pin|SER_T3_Pin|TRIG_BPM_Pin|DISP_CVSEQ1_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f640 2109 	movw	r1, #2569	; 0xa09
 800226e:	4883      	ldr	r0, [pc, #524]	; (800247c <MX_GPIO_Init+0x2ac>)
 8002270:	f002 fd90 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SRCLK_T2_Pin|SER_T2_Pin|CCLK_T1_Pin|DISPLAY_CLR_Pin
 8002274:	2200      	movs	r2, #0
 8002276:	f640 7103 	movw	r1, #3843	; 0xf03
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227e:	f002 fd89 	bl	8004d94 <HAL_GPIO_WritePin>
                          |CCLR_T3_Pin|DISP_BPM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_MODE_Pin|CCLR_T1_Pin|SER_T1_Pin|SRCLK_T1_Pin
 8002282:	2200      	movs	r2, #0
 8002284:	f24e 713c 	movw	r1, #59196	; 0xe73c
 8002288:	487d      	ldr	r0, [pc, #500]	; (8002480 <MX_GPIO_Init+0x2b0>)
 800228a:	f002 fd83 	bl	8004d94 <HAL_GPIO_WritePin>
                          |RCLK_T1_Pin|CCLK_T3_Pin|CCLK_T2_Pin|CCLR_T2_Pin
                          |TRIG_T3_Pin|TRIG_T2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_T1_GPIO_Port, TRIG_T1_Pin, GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002294:	4879      	ldr	r0, [pc, #484]	; (800247c <MX_GPIO_Init+0x2ac>)
 8002296:	f002 fd7d 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CVSEQ2_GPIO_Port, DISP_CVSEQ2_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2104      	movs	r1, #4
 800229e:	4879      	ldr	r0, [pc, #484]	; (8002484 <MX_GPIO_Init+0x2b4>)
 80022a0:	f002 fd78 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROTA_T2_Pin SW_CVSEQ2_Pin ROTA_T3_Pin ROTA_T1_Pin
                           SW_T123_Pin */
  GPIO_InitStruct.Pin = ROTA_T2_Pin|SW_CVSEQ2_Pin|ROTA_T3_Pin|ROTA_T1_Pin
 80022a4:	f24a 4350 	movw	r3, #42064	; 0xa450
 80022a8:	617b      	str	r3, [r7, #20]
                          |SW_T123_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4870      	ldr	r0, [pc, #448]	; (800247c <MX_GPIO_Init+0x2ac>)
 80022bc:	f002 fba8 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTB_T2_Pin ROTB_T1_Pin */
  GPIO_InitStruct.Pin = ROTB_T2_Pin|ROTB_T1_Pin;
 80022c0:	f244 0320 	movw	r3, #16416	; 0x4020
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	4869      	ldr	r0, [pc, #420]	; (800247c <MX_GPIO_Init+0x2ac>)
 80022d6:	f002 fb9b 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RCLK_T3_Pin SRCLK_T3_Pin */
  GPIO_InitStruct.Pin = RCLK_T3_Pin|SRCLK_T3_Pin;
 80022da:	2303      	movs	r3, #3
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4861      	ldr	r0, [pc, #388]	; (8002478 <MX_GPIO_Init+0x2a8>)
 80022f2:	f002 fb8d 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RCLK_T2_Pin DISP_CVSEQ1_Pin */
  GPIO_InitStruct.Pin = RCLK_T2_Pin|DISP_CVSEQ1_Pin;
 80022f6:	f640 0301 	movw	r3, #2049	; 0x801
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	485b      	ldr	r0, [pc, #364]	; (800247c <MX_GPIO_Init+0x2ac>)
 8002310:	f002 fb7e 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SER_T3_Pin TRIG_T1_Pin TRIG_BPM_Pin */
  GPIO_InitStruct.Pin = SER_T3_Pin|TRIG_T1_Pin|TRIG_BPM_Pin;
 8002314:	f44f 7342 	mov.w	r3, #776	; 0x308
 8002318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	2301      	movs	r3, #1
 800231c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4853      	ldr	r0, [pc, #332]	; (800247c <MX_GPIO_Init+0x2ac>)
 800232e:	f002 fb6f 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_T2_Pin SER_T2_Pin CCLK_T1_Pin DISPLAY_CLR_Pin
                           CCLR_T3_Pin */
  GPIO_InitStruct.Pin = SRCLK_T2_Pin|SER_T2_Pin|CCLK_T1_Pin|DISPLAY_CLR_Pin
 8002332:	f240 7303 	movw	r3, #1795	; 0x703
 8002336:	617b      	str	r3, [r7, #20]
                          |CCLR_T3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234e:	f002 fb5f 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMPO_CVSEQ2_Pin TEMPO_CVSEQ1_Pin */
  GPIO_InitStruct.Pin = TEMPO_CVSEQ2_Pin|TEMPO_CVSEQ1_Pin;
 8002352:	230c      	movs	r3, #12
 8002354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002356:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236a:	f002 fb51 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTB_T3_Pin ROTB_BPM_Pin */
  GPIO_InitStruct.Pin = ROTB_T3_Pin|ROTB_BPM_Pin;
 800236e:	f640 0302 	movw	r3, #2050	; 0x802
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	483f      	ldr	r0, [pc, #252]	; (8002480 <MX_GPIO_Init+0x2b0>)
 8002384:	f002 fb44 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_MODE_Pin SRCLK_T1_Pin */
  GPIO_InitStruct.Pin = DISP_MODE_Pin|SRCLK_T1_Pin;
 8002388:	f244 0304 	movw	r3, #16388	; 0x4004
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4837      	ldr	r0, [pc, #220]	; (8002480 <MX_GPIO_Init+0x2b0>)
 80023a2:	f002 fb35 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CCLR_T1_Pin SER_T1_Pin RCLK_T1_Pin CCLK_T3_Pin
                           CCLK_T2_Pin CCLR_T2_Pin TRIG_T3_Pin TRIG_T2_Pin */
  GPIO_InitStruct.Pin = CCLR_T1_Pin|SER_T1_Pin|RCLK_T1_Pin|CCLK_T3_Pin
 80023a6:	f24a 7338 	movw	r3, #42808	; 0xa738
 80023aa:	617b      	str	r3, [r7, #20]
                          |CCLK_T2_Pin|CCLR_T2_Pin|TRIG_T3_Pin|TRIG_T2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	4830      	ldr	r0, [pc, #192]	; (8002480 <MX_GPIO_Init+0x2b0>)
 80023c0:	f002 fb26 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTA_BPM_Pin SW_CVSEQ1_Pin */
  GPIO_InitStruct.Pin = ROTA_BPM_Pin|SW_CVSEQ1_Pin;
 80023c4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80023c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4829      	ldr	r0, [pc, #164]	; (8002480 <MX_GPIO_Init+0x2b0>)
 80023dc:	f002 fb18 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_BPM_Pin */
  GPIO_InitStruct.Pin = DISP_BPM_Pin;
 80023e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_BPM_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fc:	f002 fb08 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CVSEQ2_Pin */
  GPIO_InitStruct.Pin = DISP_CVSEQ2_Pin;
 8002400:	2304      	movs	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2301      	movs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CVSEQ2_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	481b      	ldr	r0, [pc, #108]	; (8002484 <MX_GPIO_Init+0x2b4>)
 8002418:	f002 fafa 	bl	8004a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	2008      	movs	r0, #8
 8002422:	f001 fe9e 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002426:	2008      	movs	r0, #8
 8002428:	f001 feb7 	bl	800419a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2009      	movs	r0, #9
 8002432:	f001 fe96 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002436:	2009      	movs	r0, #9
 8002438:	f001 feaf 	bl	800419a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	200a      	movs	r0, #10
 8002442:	f001 fe8e 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002446:	200a      	movs	r0, #10
 8002448:	f001 fea7 	bl	800419a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2017      	movs	r0, #23
 8002452:	f001 fe86 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002456:	2017      	movs	r0, #23
 8002458:	f001 fe9f 	bl	800419a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	2028      	movs	r0, #40	; 0x28
 8002462:	f001 fe7e 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002466:	2028      	movs	r0, #40	; 0x28
 8002468:	f001 fe97 	bl	800419a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	48001c00 	.word	0x48001c00
 800247c:	48000800 	.word	0x48000800
 8002480:	48000400 	.word	0x48000400
 8002484:	48000c00 	.word	0x48000c00

08002488 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	if(htim == seq._htim)
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002492:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d102      	bne.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Seq_Trigger(&seq);
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 800249e:	f7fe fea5 	bl	80011ec <Seq_Trigger>
	}
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200002c0 	.word	0x200002c0

080024b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == seq._SWITCH.Pin) Seq_ChangeMode(&seq);
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <HAL_GPIO_EXTI_Callback+0x68>)
 80024bc:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d103      	bne.n	80024ce <HAL_GPIO_EXTI_Callback+0x1e>
 80024c6:	4814      	ldr	r0, [pc, #80]	; (8002518 <HAL_GPIO_EXTI_Callback+0x68>)
 80024c8:	f7fe fd2e 	bl	8000f28 <Seq_ChangeMode>
	else if(GPIO_Pin == seq._BPM_ROTA.Pin) Seq_modifyBPM(&seq);
	else if(GPIO_Pin == CVSeq1._TRIG.Pin) CVSeq_updateCVValue(&CVSeq1);
	else if(GPIO_Pin == CVSeq2._TRIG.Pin) CVSeq_updateCVValue(&CVSeq2);
	else Seq_TracksExternalInterruption(&seq, GPIO_Pin);
}
 80024cc:	e020      	b.n	8002510 <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == seq._BPM_ROTA.Pin) Seq_modifyBPM(&seq);
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_GPIO_EXTI_Callback+0x68>)
 80024d0:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d103      	bne.n	80024e2 <HAL_GPIO_EXTI_Callback+0x32>
 80024da:	480f      	ldr	r0, [pc, #60]	; (8002518 <HAL_GPIO_EXTI_Callback+0x68>)
 80024dc:	f7fe fd96 	bl	800100c <Seq_modifyBPM>
}
 80024e0:	e016      	b.n	8002510 <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == CVSeq1._TRIG.Pin) CVSeq_updateCVValue(&CVSeq1);
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_GPIO_EXTI_Callback+0x6c>)
 80024e4:	8b1b      	ldrh	r3, [r3, #24]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d103      	bne.n	80024f4 <HAL_GPIO_EXTI_Callback+0x44>
 80024ec:	480b      	ldr	r0, [pc, #44]	; (800251c <HAL_GPIO_EXTI_Callback+0x6c>)
 80024ee:	f7fe fb3c 	bl	8000b6a <CVSeq_updateCVValue>
}
 80024f2:	e00d      	b.n	8002510 <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == CVSeq2._TRIG.Pin) CVSeq_updateCVValue(&CVSeq2);
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_GPIO_EXTI_Callback+0x70>)
 80024f6:	8b1b      	ldrh	r3, [r3, #24]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d103      	bne.n	8002506 <HAL_GPIO_EXTI_Callback+0x56>
 80024fe:	4808      	ldr	r0, [pc, #32]	; (8002520 <HAL_GPIO_EXTI_Callback+0x70>)
 8002500:	f7fe fb33 	bl	8000b6a <CVSeq_updateCVValue>
}
 8002504:	e004      	b.n	8002510 <HAL_GPIO_EXTI_Callback+0x60>
	else Seq_TracksExternalInterruption(&seq, GPIO_Pin);
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	4619      	mov	r1, r3
 800250a:	4803      	ldr	r0, [pc, #12]	; (8002518 <HAL_GPIO_EXTI_Callback+0x68>)
 800250c:	f7fe fea2 	bl	8001254 <Seq_TracksExternalInterruption>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200002c0 	.word	0x200002c0
 800251c:	2000049c 	.word	0x2000049c
 8002520:	200004c8 	.word	0x200004c8

08002524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800252c:	e7fe      	b.n	800252c <Error_Handler+0x8>
	...

08002530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_MspInit+0x44>)
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_MspInit+0x44>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6613      	str	r3, [r2, #96]	; 0x60
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_MspInit+0x44>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_MspInit+0x44>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_MspInit+0x44>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_MspInit+0x44>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <HAL_ADC_MspInit+0x1cc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d15a      	bne.n	8002650 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_ADC_MspInit+0x1d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	4a69      	ldr	r2, [pc, #420]	; (8002748 <HAL_ADC_MspInit+0x1d0>)
 80025a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_ADC_MspInit+0x1d0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80025ac:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80025b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b8:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	4a60      	ldr	r2, [pc, #384]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = CV2_CVSEQ1_Pin|CV1_CVSEQ1_Pin;
 80025dc:	23c0      	movs	r3, #192	; 0xc0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025e0:	230b      	movs	r3, #11
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f2:	f002 fa0d 	bl	8004a10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 80025f8:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_ADC_MspInit+0x1dc>)
 80025fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025fc:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002602:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	4b51      	ldr	r3, [pc, #324]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800260e:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002614:	4b4e      	ldr	r3, [pc, #312]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 8002616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800261c:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 800261e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002622:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002624:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 8002626:	2220      	movs	r2, #32
 8002628:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 800262c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002630:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002632:	4847      	ldr	r0, [pc, #284]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 8002634:	f001 fff4 	bl	8004620 <HAL_DMA_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800263e:	f7ff ff71 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a42      	ldr	r2, [pc, #264]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 8002646:	64da      	str	r2, [r3, #76]	; 0x4c
 8002648:	4a41      	ldr	r2, [pc, #260]	; (8002750 <HAL_ADC_MspInit+0x1d8>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800264e:	e075      	b.n	800273c <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a40      	ldr	r2, [pc, #256]	; (8002758 <HAL_ADC_MspInit+0x1e0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d170      	bne.n	800273c <HAL_ADC_MspInit+0x1c4>
    HAL_RCC_ADC_CLK_ENABLED++;
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_ADC_MspInit+0x1d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	4a39      	ldr	r2, [pc, #228]	; (8002748 <HAL_ADC_MspInit+0x1d0>)
 8002662:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002664:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_ADC_MspInit+0x1d0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10b      	bne.n	8002684 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800266c:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	4a36      	ldr	r2, [pc, #216]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 8002672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	4a30      	ldr	r2, [pc, #192]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	4a2a      	ldr	r2, [pc, #168]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_ADC_MspInit+0x1d4>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CV1_CVSEQ2_Pin;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026b8:	230b      	movs	r3, #11
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CV1_CVSEQ2_GPIO_Port, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4825      	ldr	r0, [pc, #148]	; (800275c <HAL_ADC_MspInit+0x1e4>)
 80026c8:	f002 f9a2 	bl	8004a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CV2_CVSEQ2_Pin;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026d0:	230b      	movs	r3, #11
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CV2_CVSEQ2_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4619      	mov	r1, r3
 80026de:	4820      	ldr	r0, [pc, #128]	; (8002760 <HAL_ADC_MspInit+0x1e8>)
 80026e0:	f002 f996 	bl	8004a10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 80026e6:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_ADC_MspInit+0x1f0>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 8002704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002708:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 800270c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002710:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 8002714:	2220      	movs	r2, #32
 8002716:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 800271a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800271e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002720:	4810      	ldr	r0, [pc, #64]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 8002722:	f001 ff7d 	bl	8004620 <HAL_DMA_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800272c:	f7ff fefa 	bl	8002524 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_ADC_MspInit+0x1ec>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800273c:	bf00      	nop
 800273e:	3730      	adds	r7, #48	; 0x30
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	50040000 	.word	0x50040000
 8002748:	200004f4 	.word	0x200004f4
 800274c:	40021000 	.word	0x40021000
 8002750:	20000140 	.word	0x20000140
 8002754:	40020008 	.word	0x40020008
 8002758:	50040100 	.word	0x50040100
 800275c:	48000800 	.word	0x48000800
 8002760:	48000400 	.word	0x48000400
 8002764:	20000188 	.word	0x20000188
 8002768:	4002001c 	.word	0x4002001c

0800276c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <HAL_DAC_MspInit+0x138>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f040 8085 	bne.w	800289a <HAL_DAC_MspInit+0x12e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <HAL_DAC_MspInit+0x13c>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <HAL_DAC_MspInit+0x13c>)
 8002796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800279a:	6593      	str	r3, [r2, #88]	; 0x58
 800279c:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <HAL_DAC_MspInit+0x13c>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_DAC_MspInit+0x13c>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4a3e      	ldr	r2, [pc, #248]	; (80028a8 <HAL_DAC_MspInit+0x13c>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <HAL_DAC_MspInit+0x13c>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = CVSEQ2_OUT_Pin|CVSEQ1_OUT_Pin;
 80027c0:	2330      	movs	r3, #48	; 0x30
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c4:	2303      	movs	r3, #3
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d6:	f002 f91b 	bl	8004a10 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_DAC_MspInit+0x140>)
 80027dc:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <HAL_DAC_MspInit+0x144>)
 80027de:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_DAC_MspInit+0x140>)
 80027e2:	2206      	movs	r2, #6
 80027e4:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_DAC_MspInit+0x140>)
 80027e8:	2210      	movs	r2, #16
 80027ea:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_DAC_MspInit+0x140>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_DAC_MspInit+0x140>)
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027f8:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <HAL_DAC_MspInit+0x140>)
 80027fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fe:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_DAC_MspInit+0x140>)
 8002802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002806:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8002808:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_DAC_MspInit+0x140>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800280e:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_DAC_MspInit+0x140>)
 8002810:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002814:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002816:	4825      	ldr	r0, [pc, #148]	; (80028ac <HAL_DAC_MspInit+0x140>)
 8002818:	f001 ff02 	bl	8004620 <HAL_DMA_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 8002822:	f7ff fe7f 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <HAL_DAC_MspInit+0x140>)
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <HAL_DAC_MspInit+0x140>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_DAC_MspInit+0x14c>)
 8002836:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 800283a:	2205      	movs	r2, #5
 800283c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002840:	2210      	movs	r2, #16
 8002842:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002856:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 800285a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002868:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800286c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800286e:	4811      	ldr	r0, [pc, #68]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002870:	f001 fed6 	bl	8004620 <HAL_DMA_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 800287a:	f7ff fe53 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <HAL_DAC_MspInit+0x148>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2036      	movs	r0, #54	; 0x36
 8002890:	f001 fc67 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002894:	2036      	movs	r0, #54	; 0x36
 8002896:	f001 fc80 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40007400 	.word	0x40007400
 80028a8:	40021000 	.word	0x40021000
 80028ac:	200001e4 	.word	0x200001e4
 80028b0:	40020030 	.word	0x40020030
 80028b4:	2000022c 	.word	0x2000022c
 80028b8:	40020044 	.word	0x40020044

080028bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_TIM_Base_MspInit+0x44>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_TIM_Base_MspInit+0x48>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <HAL_TIM_Base_MspInit+0x48>)
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_TIM_Base_MspInit+0x48>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2036      	movs	r0, #54	; 0x36
 80028ec:	f001 fc39 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028f0:	2036      	movs	r0, #54	; 0x36
 80028f2:	f001 fc52 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40001000 	.word	0x40001000
 8002904:	40021000 	.word	0x40021000

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f000 f904 	bl	8002b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMPO_CVSEQ2_Pin);
 8002960:	2004      	movs	r0, #4
 8002962:	f002 fa2f 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}

0800296a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMPO_CVSEQ1_Pin);
 800296e:	2008      	movs	r0, #8
 8002970:	f002 fa28 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROTA_T3_Pin);
 800297c:	2010      	movs	r0, #16
 800297e:	f002 fa21 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <DMA1_Channel1_IRQHandler+0x10>)
 800298e:	f001 ff5f 	bl	8004850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000140 	.word	0x20000140

0800299c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <DMA1_Channel2_IRQHandler+0x10>)
 80029a2:	f001 ff55 	bl	8004850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000188 	.word	0x20000188

080029b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <DMA1_Channel3_IRQHandler+0x10>)
 80029b6:	f001 ff4b 	bl	8004850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200001e4 	.word	0x200001e4

080029c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <DMA1_Channel4_IRQHandler+0x10>)
 80029ca:	f001 ff41 	bl	8004850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000022c 	.word	0x2000022c

080029d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROTA_T1_Pin);
 80029dc:	2040      	movs	r0, #64	; 0x40
 80029de:	f002 f9f1 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_CVSEQ1_Pin);
 80029e2:	2080      	movs	r0, #128	; 0x80
 80029e4:	f002 f9ee 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_T123_Pin);
 80029f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029f4:	f002 f9e6 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROTA_BPM_Pin);
 80029f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029fc:	f002 f9e2 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROTA_T2_Pin);
 8002a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a04:	f002 f9de 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_CVSEQ2_Pin);
 8002a08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a0c:	f002 f9da 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a18:	4803      	ldr	r0, [pc, #12]	; (8002a28 <TIM6_DAC_IRQHandler+0x14>)
 8002a1a:	f003 fd9b 	bl	8006554 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <TIM6_DAC_IRQHandler+0x18>)
 8002a20:	f001 fc44 	bl	80042ac <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000274 	.word	0x20000274
 8002a2c:	200001d0 	.word	0x200001d0

08002a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <SystemInit+0x20>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <SystemInit+0x20>)
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a58:	f7ff ffea 	bl	8002a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a5e:	490d      	ldr	r1, [pc, #52]	; (8002a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <LoopForever+0xe>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a64:	e002      	b.n	8002a6c <LoopCopyDataInit>

08002a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6a:	3304      	adds	r3, #4

08002a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a70:	d3f9      	bcc.n	8002a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <LoopForever+0x16>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a78:	e001      	b.n	8002a7e <LoopFillZerobss>

08002a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a7c:	3204      	adds	r2, #4

08002a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a80:	d3fb      	bcc.n	8002a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a82:	f003 ffdf 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a86:	f7fe ffbd 	bl	8001a04 <main>

08002a8a <LoopForever>:

LoopForever:
    b LoopForever
 8002a8a:	e7fe      	b.n	8002a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002a98:	08007128 	.word	0x08007128
  ldr r2, =_sbss
 8002a9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002aa0:	20000634 	.word	0x20000634

08002aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC1_2_IRQHandler>
	...

08002aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_Init+0x3c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_Init+0x3c>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f001 fb44 	bl	800414c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 f80f 	bl	8002ae8 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	e001      	b.n	8002ada <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ad6:	f7ff fd2b 	bl	8002530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ada:	79fb      	ldrb	r3, [r7, #7]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40022000 	.word	0x40022000

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_InitTick+0x6c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d023      	beq.n	8002b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_InitTick+0x70>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_InitTick+0x6c>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 fb4f 	bl	80041b6 <HAL_SYSTICK_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d809      	bhi.n	8002b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f001 fb19 	bl	8004162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_InitTick+0x74>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e007      	b.n	8002b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e004      	b.n	8002b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e001      	b.n	8002b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000008 	.word	0x20000008
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x20>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x24>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_IncTick+0x24>)
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008
 8002b84:	200004f8 	.word	0x200004f8

08002b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_GetTick+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	200004f8 	.word	0x200004f8

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d005      	beq.n	8002bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_Delay+0x44>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc6:	bf00      	nop
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f7      	bhi.n	8002bc8 <HAL_Delay+0x28>
  {
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000008 	.word	0x20000008

08002be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	609a      	str	r2, [r3, #8]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <LL_ADC_SetOffset+0x44>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	03fff000 	.word	0x03fff000

08002c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3360      	adds	r3, #96	; 0x60
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3360      	adds	r3, #96	; 0x60
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3330      	adds	r3, #48	; 0x30
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	211f      	movs	r1, #31
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 011f 	and.w	r1, r3, #31
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3314      	adds	r3, #20
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	0e5b      	lsrs	r3, r3, #25
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	4413      	add	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	0d1b      	lsrs	r3, r3, #20
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2107      	movs	r1, #7
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0d1b      	lsrs	r3, r3, #20
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0318 	and.w	r3, r3, #24
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002df4:	40d9      	lsrs	r1, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	400b      	ands	r3, r1
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	0007ffff 	.word	0x0007ffff

08002e18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 031f 	and.w	r3, r3, #31
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6093      	str	r3, [r2, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <LL_ADC_IsEnabled+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_ADC_IsEnabled+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d101      	bne.n	8002f84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e130      	b.n	8003210 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fadb 	bl	8002578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff3f 	bl	8002e58 <LL_ADC_IsDeepPowerDownEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff25 	bl	8002e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff5a 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff3e 	bl	8002e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003004:	4b84      	ldr	r3, [pc, #528]	; (8003218 <HAL_ADC_Init+0x284>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	4a84      	ldr	r2, [pc, #528]	; (800321c <HAL_ADC_Init+0x288>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003018:	e002      	b.n	8003020 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3b01      	subs	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f9      	bne.n	800301a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff3c 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	f043 0210 	orr.w	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff75 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 800305c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 80c9 	bne.w	80031fe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 80c5 	bne.w	80031fe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff35 	bl	8002ef8 <LL_ADC_IsEnabled>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d115      	bne.n	80030c0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003094:	4862      	ldr	r0, [pc, #392]	; (8003220 <HAL_ADC_Init+0x28c>)
 8003096:	f7ff ff2f 	bl	8002ef8 <LL_ADC_IsEnabled>
 800309a:	4604      	mov	r4, r0
 800309c:	4861      	ldr	r0, [pc, #388]	; (8003224 <HAL_ADC_Init+0x290>)
 800309e:	f7ff ff2b 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	431c      	orrs	r4, r3
 80030a6:	4860      	ldr	r0, [pc, #384]	; (8003228 <HAL_ADC_Init+0x294>)
 80030a8:	f7ff ff26 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4323      	orrs	r3, r4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4619      	mov	r1, r3
 80030ba:	485c      	ldr	r0, [pc, #368]	; (800322c <HAL_ADC_Init+0x298>)
 80030bc:	f7ff fd94 	bl	8002be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e5b      	ldrb	r3, [r3, #25]
 80030c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80030d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80030d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d106      	bne.n	80030fc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	3b01      	subs	r3, #1
 80030f4:	045b      	lsls	r3, r3, #17
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_ADC_Init+0x29c>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	430b      	orrs	r3, r1
 800312a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff1b 	bl	8002f6c <LL_ADC_INJ_IsConversionOngoing>
 8003136:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d13d      	bne.n	80031ba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d13a      	bne.n	80031ba <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003148:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003150:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003160:	f023 0302 	bic.w	r3, r3, #2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	69b9      	ldr	r1, [r7, #24]
 800316a:	430b      	orrs	r3, r1
 800316c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003174:	2b01      	cmp	r3, #1
 8003176:	d118      	bne.n	80031aa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003194:	4311      	orrs	r1, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800319a:	430a      	orrs	r2, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	611a      	str	r2, [r3, #16]
 80031a8:	e007      	b.n	80031ba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10c      	bne.n	80031dc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f023 010f 	bic.w	r1, r3, #15
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
 80031da:	e007      	b.n	80031ec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 020f 	bic.w	r2, r2, #15
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f023 0303 	bic.w	r3, r3, #3
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
 80031fc:	e007      	b.n	800320e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0210 	orr.w	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800320e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3724      	adds	r7, #36	; 0x24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	20000000 	.word	0x20000000
 800321c:	053e2d63 	.word	0x053e2d63
 8003220:	50040000 	.word	0x50040000
 8003224:	50040100 	.word	0x50040100
 8003228:	50040200 	.word	0x50040200
 800322c:	50040300 	.word	0x50040300
 8003230:	fff0c007 	.word	0xfff0c007

08003234 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003240:	4853      	ldr	r0, [pc, #332]	; (8003390 <HAL_ADC_Start_DMA+0x15c>)
 8003242:	f7ff fde9 	bl	8002e18 <LL_ADC_GetMultimode>
 8003246:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fe7a 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 8093 	bne.w	8003380 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_Start_DMA+0x34>
 8003264:	2302      	movs	r3, #2
 8003266:	e08e      	b.n	8003386 <HAL_ADC_Start_DMA+0x152>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a47      	ldr	r2, [pc, #284]	; (8003394 <HAL_ADC_Start_DMA+0x160>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d008      	beq.n	800328c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b05      	cmp	r3, #5
 8003284:	d002      	beq.n	800328c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b09      	cmp	r3, #9
 800328a:	d172      	bne.n	8003372 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc9d 	bl	8003bcc <ADC_Enable>
 8003292:	4603      	mov	r3, r0
 8003294:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d165      	bne.n	8003368 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_ADC_Start_DMA+0x164>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d002      	beq.n	80032c0 <HAL_ADC_Start_DMA+0x8c>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e000      	b.n	80032c2 <HAL_ADC_Start_DMA+0x8e>
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_ADC_Start_DMA+0x168>)
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d002      	beq.n	80032d0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f023 0206 	bic.w	r2, r3, #6
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58
 80032f4:	e002      	b.n	80032fc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <HAL_ADC_Start_DMA+0x16c>)
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <HAL_ADC_Start_DMA+0x170>)
 800330a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_ADC_Start_DMA+0x174>)
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	221c      	movs	r2, #28
 800331a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0210 	orr.w	r2, r2, #16
 8003332:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3340      	adds	r3, #64	; 0x40
 800334e:	4619      	mov	r1, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f001 fa1c 	bl	8004790 <HAL_DMA_Start_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fddc 	bl	8002f1e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003366:	e00d      	b.n	8003384 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003370:	e008      	b.n	8003384 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800337e:	e001      	b.n	8003384 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003384:	7dfb      	ldrb	r3, [r7, #23]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	50040300 	.word	0x50040300
 8003394:	50040200 	.word	0x50040200
 8003398:	50040100 	.word	0x50040100
 800339c:	50040000 	.word	0x50040000
 80033a0:	08003cd9 	.word	0x08003cd9
 80033a4:	08003db1 	.word	0x08003db1
 80033a8:	08003dcd 	.word	0x08003dcd

080033ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0b6      	sub	sp, #216	; 0xd8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x22>
 8003406:	2302      	movs	r3, #2
 8003408:	e3c9      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x7b6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fd95 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 83aa 	bne.w	8003b78 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d824      	bhi.n	800347e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	3b02      	subs	r3, #2
 800343a:	2b03      	cmp	r3, #3
 800343c:	d81b      	bhi.n	8003476 <HAL_ADC_ConfigChannel+0x8e>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <HAL_ADC_ConfigChannel+0x5c>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003455 	.word	0x08003455
 8003448:	0800345d 	.word	0x0800345d
 800344c:	08003465 	.word	0x08003465
 8003450:	0800346d 	.word	0x0800346d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003454:	230c      	movs	r3, #12
 8003456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800345a:	e010      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800345c:	2312      	movs	r3, #18
 800345e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003462:	e00c      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003464:	2318      	movs	r3, #24
 8003466:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800346a:	e008      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800346c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003476:	2306      	movs	r3, #6
 8003478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800347c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800348c:	f7ff fc48 	bl	8002d20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fd56 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 800349a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fd62 	bl	8002f6c <LL_ADC_INJ_IsConversionOngoing>
 80034a8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 81a4 	bne.w	80037fe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 819f 	bne.w	80037fe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f7ff fc53 	bl	8002d78 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d00a      	beq.n	800350a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003504:	f7ff fba4 	bl	8002c50 <LL_ADC_SetOffset>
 8003508:	e179      	b.n	80037fe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fbc1 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x14e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fbb6 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 800352c:	4603      	mov	r3, r0
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	e01e      	b.n	8003574 <HAL_ADC_ConfigChannel+0x18c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fbab 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800355c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e004      	b.n	8003572 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1a4>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	e018      	b.n	80035be <HAL_ADC_ConfigChannel+0x1d6>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80035a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80035a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e004      	b.n	80035be <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80035b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035be:	429a      	cmp	r2, r3
 80035c0:	d106      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fb7a 	bl	8002cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fb5e 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80035dc:	4603      	mov	r3, r0
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x214>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fb53 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	e01e      	b.n	800363a <HAL_ADC_ConfigChannel+0x252>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fb48 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800361a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e004      	b.n	8003638 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800362e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x26a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	e018      	b.n	8003684 <HAL_ADC_ConfigChannel+0x29c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800366a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800366e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e004      	b.n	8003684 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800367a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003684:	429a      	cmp	r2, r3
 8003686:	d106      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fb17 	bl	8002cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fafb 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x2da>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff faf0 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	e01e      	b.n	8003700 <HAL_ADC_ConfigChannel+0x318>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fae5 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e004      	b.n	80036fe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80036f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x330>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	e014      	b.n	8003742 <HAL_ADC_ConfigChannel+0x35a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800372c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e004      	b.n	8003742 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003742:	429a      	cmp	r2, r3
 8003744:	d106      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fab8 	bl	8002cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2103      	movs	r1, #3
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fa9c 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x398>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2103      	movs	r1, #3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fa91 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	0e9b      	lsrs	r3, r3, #26
 800377a:	f003 021f 	and.w	r2, r3, #31
 800377e:	e017      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x3c8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2103      	movs	r1, #3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fa86 	bl	8002c98 <LL_ADC_GetOffsetChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800379c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x3e0>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	e011      	b.n	80037ec <HAL_ADC_ConfigChannel+0x404>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80037d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80037da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037e0:	2320      	movs	r3, #32
 80037e2:	e003      	b.n	80037ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d106      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	2103      	movs	r1, #3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fa63 	bl	8002cc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fb78 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8140 	bne.w	8003a90 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	461a      	mov	r2, r3
 800381e:	f7ff fad7 	bl	8002dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4a8f      	ldr	r2, [pc, #572]	; (8003a64 <HAL_ADC_ConfigChannel+0x67c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	f040 8131 	bne.w	8003a90 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x46e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	3301      	adds	r3, #1
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2b09      	cmp	r3, #9
 800384c:	bf94      	ite	ls
 800384e:	2301      	movls	r3, #1
 8003850:	2300      	movhi	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e019      	b.n	800388a <HAL_ADC_ConfigChannel+0x4a2>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2b09      	cmp	r3, #9
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800388a:	2b00      	cmp	r3, #0
 800388c:	d079      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x4c2>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	0e9b      	lsrs	r3, r3, #26
 80038a0:	3301      	adds	r3, #1
 80038a2:	069b      	lsls	r3, r3, #26
 80038a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038a8:	e015      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x4ee>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80038b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80038bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80038c2:	2320      	movs	r3, #32
 80038c4:	e003      	b.n	80038ce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	069b      	lsls	r3, r3, #26
 80038d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x50e>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	e017      	b.n	8003926 <HAL_ADC_ConfigChannel+0x53e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800390e:	2320      	movs	r3, #32
 8003910:	e003      	b.n	800391a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	3301      	adds	r3, #1
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	ea42 0103 	orr.w	r1, r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <HAL_ADC_ConfigChannel+0x564>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	3301      	adds	r3, #1
 800393e:	f003 021f 	and.w	r2, r3, #31
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	051b      	lsls	r3, r3, #20
 800394a:	e018      	b.n	800397e <HAL_ADC_ConfigChannel+0x596>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003964:	2320      	movs	r3, #32
 8003966:	e003      	b.n	8003970 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397e:	430b      	orrs	r3, r1
 8003980:	e081      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_ADC_ConfigChannel+0x5b6>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	3301      	adds	r3, #1
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800399c:	e015      	b.n	80039ca <HAL_ADC_ConfigChannel+0x5e2>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80039b6:	2320      	movs	r3, #32
 80039b8:	e003      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	069b      	lsls	r3, r3, #26
 80039c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x602>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	e017      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x632>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	61bb      	str	r3, [r7, #24]
  return result;
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003a02:	2320      	movs	r3, #32
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10d      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x65e>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0e9b      	lsrs	r3, r3, #26
 8003a30:	3301      	adds	r3, #1
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b1e      	subs	r3, #30
 8003a3e:	051b      	lsls	r3, r3, #20
 8003a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a44:	e01e      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x69c>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	60fb      	str	r3, [r7, #12]
  return result;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e006      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x688>
 8003a62:	bf00      	nop
 8003a64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f003 021f 	and.w	r2, r3, #31
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b1e      	subs	r3, #30
 8003a7e:	051b      	lsls	r3, r3, #20
 8003a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7ff f974 	bl	8002d78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d07a      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a9c:	4843      	ldr	r0, [pc, #268]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003a9e:	f7ff f8c9 	bl	8002c34 <LL_ADC_GetCommonPathInternalCh>
 8003aa2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a41      	ldr	r2, [pc, #260]	; (8003bb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d12c      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d126      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	; (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x6e8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3b      	ldr	r2, [pc, #236]	; (8003bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d15d      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4834      	ldr	r0, [pc, #208]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003adc:	f7ff f897 	bl	8002c0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <HAL_ADC_ConfigChannel+0x7d4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003afa:	e002      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f9      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b08:	e040      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	; (8003bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d118      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d112      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x74c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d12d      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	481b      	ldr	r0, [pc, #108]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003b40:	f7ff f865 	bl	8002c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b44:	e024      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d120      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d11a      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d115      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b6e:	4619      	mov	r1, r3
 8003b70:	480e      	ldr	r0, [pc, #56]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003b72:	f7ff f84c 	bl	8002c0e <LL_ADC_SetCommonPathInternalCh>
 8003b76:	e00c      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b8a:	e002      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	37d8      	adds	r7, #216	; 0xd8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	80080000 	.word	0x80080000
 8003bac:	50040300 	.word	0x50040300
 8003bb0:	c7520000 	.word	0xc7520000
 8003bb4:	50040000 	.word	0x50040000
 8003bb8:	50040200 	.word	0x50040200
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	053e2d63 	.word	0x053e2d63
 8003bc4:	cb840000 	.word	0xcb840000
 8003bc8:	80000001 	.word	0x80000001

08003bcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f98b 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d169      	bne.n	8003cbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <ADC_Enable+0xfc>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e055      	b.n	8003cbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f95a 	bl	8002ed0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c1c:	482b      	ldr	r0, [pc, #172]	; (8003ccc <ADC_Enable+0x100>)
 8003c1e:	f7ff f809 	bl	8002c34 <LL_ADC_GetCommonPathInternalCh>
 8003c22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c2c:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <ADC_Enable+0x104>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	4a28      	ldr	r2, [pc, #160]	; (8003cd4 <ADC_Enable+0x108>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c46:	e002      	b.n	8003c4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f9      	bne.n	8003c48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c54:	f7fe ff98 	bl	8002b88 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5a:	e028      	b.n	8003cae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f949 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff f92d 	bl	8002ed0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c76:	f7fe ff87 	bl	8002b88 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d914      	bls.n	8003cae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d00d      	beq.n	8003cae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e007      	b.n	8003cbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d1cf      	bne.n	8003c5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	8000003f 	.word	0x8000003f
 8003ccc:	50040300 	.word	0x50040300
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	053e2d63 	.word	0x053e2d63

08003cd8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d14b      	bne.n	8003d8a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d021      	beq.n	8003d50 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fff2 	bl	8002cfa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d032      	beq.n	8003d82 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d12b      	bne.n	8003d82 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11f      	bne.n	8003d82 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
 8003d4e:	e018      	b.n	8003d82 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d111      	bne.n	8003d82 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f043 0201 	orr.w	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff fb12 	bl	80033ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d88:	e00e      	b.n	8003da8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff fb1c 	bl	80033d4 <HAL_ADC_ErrorCallback>
}
 8003d9c:	e004      	b.n	8003da8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fafe 	bl	80033c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff faee 	bl	80033d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <LL_ADC_IsEnabled>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <LL_ADC_IsEnabled+0x18>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <LL_ADC_IsEnabled+0x1a>
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d101      	bne.n	8003e3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b09f      	sub	sp, #124	; 0x7c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e093      	b.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e72:	2300      	movs	r3, #0
 8003e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e76:	2300      	movs	r3, #0
 8003e78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a47      	ldr	r2, [pc, #284]	; (8003f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d102      	bne.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e84:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	e001      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e072      	b.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff ffb9 	bl	8003e26 <LL_ADC_REG_IsConversionOngoing>
 8003eb4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ffb3 	bl	8003e26 <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d154      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d151      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ecc:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003ece:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02c      	beq.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eea:	035b      	lsls	r3, r3, #13
 8003eec:	430b      	orrs	r3, r1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef4:	4829      	ldr	r0, [pc, #164]	; (8003f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ef6:	f7ff ff83 	bl	8003e00 <LL_ADC_IsEnabled>
 8003efa:	4604      	mov	r4, r0
 8003efc:	4828      	ldr	r0, [pc, #160]	; (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003efe:	f7ff ff7f 	bl	8003e00 <LL_ADC_IsEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	431c      	orrs	r4, r3
 8003f06:	4828      	ldr	r0, [pc, #160]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f08:	f7ff ff7a 	bl	8003e00 <LL_ADC_IsEnabled>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4323      	orrs	r3, r4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d137      	bne.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f1c:	f023 030f 	bic.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	6811      	ldr	r1, [r2, #0]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	6892      	ldr	r2, [r2, #8]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f30:	e028      	b.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f3e:	4817      	ldr	r0, [pc, #92]	; (8003f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f40:	f7ff ff5e 	bl	8003e00 <LL_ADC_IsEnabled>
 8003f44:	4604      	mov	r4, r0
 8003f46:	4816      	ldr	r0, [pc, #88]	; (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f48:	f7ff ff5a 	bl	8003e00 <LL_ADC_IsEnabled>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	431c      	orrs	r4, r3
 8003f50:	4815      	ldr	r0, [pc, #84]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f52:	f7ff ff55 	bl	8003e00 <LL_ADC_IsEnabled>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4323      	orrs	r3, r4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d112      	bne.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f66:	f023 030f 	bic.w	r3, r3, #15
 8003f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f6e:	e009      	b.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f82:	e000      	b.n	8003f86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	377c      	adds	r7, #124	; 0x7c
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd90      	pop	{r4, r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	50040000 	.word	0x50040000
 8003fa0:	50040100 	.word	0x50040100
 8003fa4:	50040300 	.word	0x50040300
 8003fa8:	50040200 	.word	0x50040200

08003fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fde:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60d3      	str	r3, [r2, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <__NVIC_GetPriorityGrouping+0x18>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 0307 	and.w	r3, r3, #7
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db0b      	blt.n	800403a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	4907      	ldr	r1, [pc, #28]	; (8004048 <__NVIC_EnableIRQ+0x38>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2001      	movs	r0, #1
 8004032:	fa00 f202 	lsl.w	r2, r0, r2
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000e100 	.word	0xe000e100

0800404c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	2b00      	cmp	r3, #0
 800405e:	db0a      	blt.n	8004076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	490c      	ldr	r1, [pc, #48]	; (8004098 <__NVIC_SetPriority+0x4c>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	0112      	lsls	r2, r2, #4
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	440b      	add	r3, r1
 8004070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004074:	e00a      	b.n	800408c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4908      	ldr	r1, [pc, #32]	; (800409c <__NVIC_SetPriority+0x50>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3b04      	subs	r3, #4
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	440b      	add	r3, r1
 800408a:	761a      	strb	r2, [r3, #24]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000e100 	.word	0xe000e100
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f1c3 0307 	rsb	r3, r3, #7
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	bf28      	it	cs
 80040be:	2304      	movcs	r3, #4
 80040c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d902      	bls.n	80040d0 <NVIC_EncodePriority+0x30>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3b03      	subs	r3, #3
 80040ce:	e000      	b.n	80040d2 <NVIC_EncodePriority+0x32>
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	401a      	ands	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e8:	f04f 31ff 	mov.w	r1, #4294967295
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	4313      	orrs	r3, r2
         );
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004118:	d301      	bcc.n	800411e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411a:	2301      	movs	r3, #1
 800411c:	e00f      	b.n	800413e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <SysTick_Config+0x40>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004126:	210f      	movs	r1, #15
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	f7ff ff8e 	bl	800404c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <SysTick_Config+0x40>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <SysTick_Config+0x40>)
 8004138:	2207      	movs	r2, #7
 800413a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e010 	.word	0xe000e010

0800414c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff29 	bl	8003fac <__NVIC_SetPriorityGrouping>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004174:	f7ff ff3e 	bl	8003ff4 <__NVIC_GetPriorityGrouping>
 8004178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff8e 	bl	80040a0 <NVIC_EncodePriority>
 8004184:	4602      	mov	r2, r0
 8004186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff5d 	bl	800404c <__NVIC_SetPriority>
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff31 	bl	8004010 <__NVIC_EnableIRQ>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ffa2 	bl	8004108 <SysTick_Config>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e014      	b.n	800420a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fe fabb 	bl	800276c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	795b      	ldrb	r3, [r3, #5]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_DAC_Start+0x16>
 8004224:	2302      	movs	r3, #2
 8004226:	e03b      	b.n	80042a0 <HAL_DAC_Start+0x8e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6819      	ldr	r1, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10f      	bne.n	8004272 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800425c:	2b04      	cmp	r3, #4
 800425e:	d118      	bne.n	8004292 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	605a      	str	r2, [r3, #4]
 8004270:	e00f      	b.n	8004292 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800427c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004280:	d107      	bne.n	8004292 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0202 	orr.w	r2, r2, #2
 8004290:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	d120      	bne.n	8004306 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d118      	bne.n	8004306 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2204      	movs	r2, #4
 80042d8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042fe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f852 	bl	80043aa <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004314:	d120      	bne.n	8004358 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004324:	d118      	bne.n	8004358 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f043 0202 	orr.w	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004340:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004350:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f95a 	bl	800460c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	3308      	adds	r3, #8
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e004      	b.n	8004394 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4413      	add	r3, r2
 8004390:	3314      	adds	r3, #20
 8004392:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	461a      	mov	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b088      	sub	sp, #32
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	795b      	ldrb	r3, [r3, #5]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_DAC_ConfigChannel+0x1c>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e114      	b.n	8004604 <HAL_DAC_ConfigChannel+0x246>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2202      	movs	r2, #2
 80043e4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	f040 8081 	bne.w	80044f2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80043f0:	f7fe fbca 	bl	8002b88 <HAL_GetTick>
 80043f4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d140      	bne.n	800447e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043fc:	e018      	b.n	8004430 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043fe:	f7fe fbc3 	bl	8002b88 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d911      	bls.n	8004430 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f043 0208 	orr.w	r2, r3, #8
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2203      	movs	r2, #3
 800442a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0e9      	b.n	8004604 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1df      	bne.n	80043fe <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800443e:	2001      	movs	r0, #1
 8004440:	f7fe fbae 	bl	8002ba0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	6992      	ldr	r2, [r2, #24]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
 800444e:	e023      	b.n	8004498 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004450:	f7fe fb9a 	bl	8002b88 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d90f      	bls.n	800447e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	2b00      	cmp	r3, #0
 8004466:	da0a      	bge.n	800447e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f043 0208 	orr.w	r2, r3, #8
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2203      	movs	r2, #3
 8004478:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0c2      	b.n	8004604 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	dbe3      	blt.n	8004450 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004488:	2001      	movs	r0, #1
 800448a:	f7fe fb89 	bl	8002ba0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	6992      	ldr	r2, [r2, #24]
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	ea02 0103 	and.w	r1, r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	409a      	lsls	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	21ff      	movs	r1, #255	; 0xff
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	ea02 0103 	and.w	r1, r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11d      	bne.n	8004536 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	221f      	movs	r2, #31
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2207      	movs	r2, #7
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	431a      	orrs	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	400a      	ands	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	22c0      	movs	r2, #192	; 0xc0
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43da      	mvns	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	400a      	ands	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e098      	b.n	8004764 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_DMA_Init+0x150>)
 800463a:	429a      	cmp	r2, r3
 800463c:	d80f      	bhi.n	800465e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	4b4b      	ldr	r3, [pc, #300]	; (8004774 <HAL_DMA_Init+0x154>)
 8004646:	4413      	add	r3, r2
 8004648:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <HAL_DMA_Init+0x158>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	009a      	lsls	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a48      	ldr	r2, [pc, #288]	; (800477c <HAL_DMA_Init+0x15c>)
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
 800465c:	e00e      	b.n	800467c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <HAL_DMA_Init+0x160>)
 8004666:	4413      	add	r3, r2
 8004668:	4a43      	ldr	r2, [pc, #268]	; (8004778 <HAL_DMA_Init+0x158>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a42      	ldr	r2, [pc, #264]	; (8004784 <HAL_DMA_Init+0x164>)
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d6:	d039      	beq.n	800474c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	4a27      	ldr	r2, [pc, #156]	; (800477c <HAL_DMA_Init+0x15c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d11a      	bne.n	8004718 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_DMA_Init+0x168>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f003 031c 	and.w	r3, r3, #28
 80046ee:	210f      	movs	r1, #15
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	4924      	ldr	r1, [pc, #144]	; (8004788 <HAL_DMA_Init+0x168>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80046fc:	4b22      	ldr	r3, [pc, #136]	; (8004788 <HAL_DMA_Init+0x168>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6859      	ldr	r1, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	f003 031c 	and.w	r3, r3, #28
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	491d      	ldr	r1, [pc, #116]	; (8004788 <HAL_DMA_Init+0x168>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
 8004716:	e019      	b.n	800474c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004718:	4b1c      	ldr	r3, [pc, #112]	; (800478c <HAL_DMA_Init+0x16c>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	f003 031c 	and.w	r3, r3, #28
 8004724:	210f      	movs	r1, #15
 8004726:	fa01 f303 	lsl.w	r3, r1, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	4917      	ldr	r1, [pc, #92]	; (800478c <HAL_DMA_Init+0x16c>)
 800472e:	4013      	ands	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004732:	4b16      	ldr	r3, [pc, #88]	; (800478c <HAL_DMA_Init+0x16c>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f003 031c 	and.w	r3, r3, #28
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	4911      	ldr	r1, [pc, #68]	; (800478c <HAL_DMA_Init+0x16c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40020407 	.word	0x40020407
 8004774:	bffdfff8 	.word	0xbffdfff8
 8004778:	cccccccd 	.word	0xcccccccd
 800477c:	40020000 	.word	0x40020000
 8004780:	bffdfbf8 	.word	0xbffdfbf8
 8004784:	40020400 	.word	0x40020400
 8004788:	400200a8 	.word	0x400200a8
 800478c:	400204a8 	.word	0x400204a8

08004790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_DMA_Start_IT+0x20>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e04b      	b.n	8004848 <HAL_DMA_Start_IT+0xb8>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d13a      	bne.n	800483a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f8e0 	bl	80049ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 020e 	orr.w	r2, r2, #14
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e00f      	b.n	8004828 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 020a 	orr.w	r2, r2, #10
 8004826:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e005      	b.n	8004846 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004842:	2302      	movs	r3, #2
 8004844:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	f003 031c 	and.w	r3, r3, #28
 8004870:	2204      	movs	r2, #4
 8004872:	409a      	lsls	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d026      	beq.n	80048ca <HAL_DMA_IRQHandler+0x7a>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d021      	beq.n	80048ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f003 021c 	and.w	r2, r3, #28
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	2104      	movs	r1, #4
 80048b2:	fa01 f202 	lsl.w	r2, r1, r2
 80048b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d071      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048c8:	e06c      	b.n	80049a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	f003 031c 	and.w	r3, r3, #28
 80048d2:	2202      	movs	r2, #2
 80048d4:	409a      	lsls	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02e      	beq.n	800493c <HAL_DMA_IRQHandler+0xec>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d029      	beq.n	800493c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 020a 	bic.w	r2, r2, #10
 8004904:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	f003 021c 	and.w	r2, r3, #28
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2102      	movs	r1, #2
 800491c:	fa01 f202 	lsl.w	r2, r1, r2
 8004920:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d038      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800493a:	e033      	b.n	80049a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004940:	f003 031c 	and.w	r3, r3, #28
 8004944:	2208      	movs	r2, #8
 8004946:	409a      	lsls	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02a      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x156>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d025      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 020e 	bic.w	r2, r2, #14
 8004968:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f003 021c 	and.w	r2, r3, #28
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2101      	movs	r1, #1
 8004978:	fa01 f202 	lsl.w	r2, r1, r2
 800497c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
}
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c0:	f003 021c 	and.w	r2, r3, #28
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f202 	lsl.w	r2, r1, r2
 80049ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d108      	bne.n	80049f2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049f0:	e007      	b.n	8004a02 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a1e:	e17f      	b.n	8004d20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8171 	beq.w	8004d1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d005      	beq.n	8004a50 <HAL_GPIO_Init+0x40>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d130      	bne.n	8004ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a86:	2201      	movs	r2, #1
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f003 0201 	and.w	r2, r3, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d118      	bne.n	8004af0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	08db      	lsrs	r3, r3, #3
 8004ada:	f003 0201 	and.w	r2, r3, #1
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d017      	beq.n	8004b2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2203      	movs	r2, #3
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d123      	bne.n	8004b80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	08da      	lsrs	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3208      	adds	r2, #8
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	220f      	movs	r2, #15
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	08da      	lsrs	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3208      	adds	r2, #8
 8004b7a:	6939      	ldr	r1, [r7, #16]
 8004b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0203 	and.w	r2, r3, #3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80ac 	beq.w	8004d1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <HAL_GPIO_Init+0x330>)
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	4a5e      	ldr	r2, [pc, #376]	; (8004d40 <HAL_GPIO_Init+0x330>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_GPIO_Init+0x330>)
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bda:	4a5a      	ldr	r2, [pc, #360]	; (8004d44 <HAL_GPIO_Init+0x334>)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	3302      	adds	r3, #2
 8004be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c04:	d025      	beq.n	8004c52 <HAL_GPIO_Init+0x242>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a4f      	ldr	r2, [pc, #316]	; (8004d48 <HAL_GPIO_Init+0x338>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01f      	beq.n	8004c4e <HAL_GPIO_Init+0x23e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <HAL_GPIO_Init+0x33c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d019      	beq.n	8004c4a <HAL_GPIO_Init+0x23a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a4d      	ldr	r2, [pc, #308]	; (8004d50 <HAL_GPIO_Init+0x340>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_GPIO_Init+0x236>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a4c      	ldr	r2, [pc, #304]	; (8004d54 <HAL_GPIO_Init+0x344>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00d      	beq.n	8004c42 <HAL_GPIO_Init+0x232>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a4b      	ldr	r2, [pc, #300]	; (8004d58 <HAL_GPIO_Init+0x348>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <HAL_GPIO_Init+0x22e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a4a      	ldr	r2, [pc, #296]	; (8004d5c <HAL_GPIO_Init+0x34c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_GPIO_Init+0x22a>
 8004c36:	2306      	movs	r3, #6
 8004c38:	e00c      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c3a:	2307      	movs	r3, #7
 8004c3c:	e00a      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c3e:	2305      	movs	r3, #5
 8004c40:	e008      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c42:	2304      	movs	r3, #4
 8004c44:	e006      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c46:	2303      	movs	r3, #3
 8004c48:	e004      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e002      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_GPIO_Init+0x244>
 8004c52:	2300      	movs	r3, #0
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	f002 0203 	and.w	r2, r2, #3
 8004c5a:	0092      	lsls	r2, r2, #2
 8004c5c:	4093      	lsls	r3, r2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c64:	4937      	ldr	r1, [pc, #220]	; (8004d44 <HAL_GPIO_Init+0x334>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c72:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c96:	4a32      	ldr	r2, [pc, #200]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c9c:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cc0:	4a27      	ldr	r2, [pc, #156]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cea:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d14:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <HAL_GPIO_Init+0x350>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f47f ae78 	bne.w	8004a20 <HAL_GPIO_Init+0x10>
  }
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40010000 	.word	0x40010000
 8004d48:	48000400 	.word	0x48000400
 8004d4c:	48000800 	.word	0x48000800
 8004d50:	48000c00 	.word	0x48000c00
 8004d54:	48001000 	.word	0x48001000
 8004d58:	48001400 	.word	0x48001400
 8004d5c:	48001800 	.word	0x48001800
 8004d60:	40010400 	.word	0x40010400

08004d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e001      	b.n	8004d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
 8004da0:	4613      	mov	r3, r2
 8004da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004da4:	787b      	ldrb	r3, [r7, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004db0:	e002      	b.n	8004db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd fb64 	bl	80024b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <HAL_PWREx_GetVoltageRange+0x18>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40007000 	.word	0x40007000

08004e10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1e:	d130      	bne.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e20:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d038      	beq.n	8004ea0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2232      	movs	r2, #50	; 0x32
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0c9b      	lsrs	r3, r3, #18
 8004e50:	3301      	adds	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e54:	e002      	b.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d102      	bne.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f2      	bne.n	8004e56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e70:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7c:	d110      	bne.n	8004ea0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e00f      	b.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8e:	d007      	beq.n	8004ea0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e98:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	20000000 	.word	0x20000000
 8004eb8:	431bde83 	.word	0x431bde83

08004ebc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e3ca      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ece:	4b97      	ldr	r3, [pc, #604]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ed8:	4b94      	ldr	r3, [pc, #592]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80e4 	beq.w	80050b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_RCC_OscConfig+0x4a>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b0c      	cmp	r3, #12
 8004efa:	f040 808b 	bne.w	8005014 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	f040 8087 	bne.w	8005014 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f06:	4b89      	ldr	r3, [pc, #548]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_RCC_OscConfig+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e3a2      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	4b82      	ldr	r3, [pc, #520]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_RCC_OscConfig+0x7c>
 8004f2e:	4b7f      	ldr	r3, [pc, #508]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f36:	e005      	b.n	8004f44 <HAL_RCC_OscConfig+0x88>
 8004f38:	4b7c      	ldr	r3, [pc, #496]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d223      	bcs.n	8004f90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fd1d 	bl	800598c <RCC_SetFlashLatencyFromMSIRange>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e383      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f5c:	4b73      	ldr	r3, [pc, #460]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a72      	ldr	r2, [pc, #456]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f62:	f043 0308 	orr.w	r3, r3, #8
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b70      	ldr	r3, [pc, #448]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	496d      	ldr	r1, [pc, #436]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f7a:	4b6c      	ldr	r3, [pc, #432]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4968      	ldr	r1, [pc, #416]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
 8004f8e:	e025      	b.n	8004fdc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f90:	4b66      	ldr	r3, [pc, #408]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a65      	ldr	r2, [pc, #404]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f96:	f043 0308 	orr.w	r3, r3, #8
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	4960      	ldr	r1, [pc, #384]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fae:	4b5f      	ldr	r3, [pc, #380]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	495b      	ldr	r1, [pc, #364]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fcdd 	bl	800598c <RCC_SetFlashLatencyFromMSIRange>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e343      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fdc:	f000 fc4a 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b52      	ldr	r3, [pc, #328]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	4950      	ldr	r1, [pc, #320]	; (8005130 <HAL_RCC_OscConfig+0x274>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	4a4e      	ldr	r2, [pc, #312]	; (8005134 <HAL_RCC_OscConfig+0x278>)
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ffc:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f7fd fd71 	bl	8002ae8 <HAL_InitTick>
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d052      	beq.n	80050b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	e327      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d032      	beq.n	8005082 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_RCC_OscConfig+0x270>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a42      	ldr	r2, [pc, #264]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005028:	f7fd fdae 	bl	8002b88 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005030:	f7fd fdaa 	bl	8002b88 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e310      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005042:	4b3a      	ldr	r3, [pc, #232]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800504e:	4b37      	ldr	r3, [pc, #220]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a36      	ldr	r2, [pc, #216]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005054:	f043 0308 	orr.w	r3, r3, #8
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RCC_OscConfig+0x270>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4931      	ldr	r1, [pc, #196]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800506c:	4b2f      	ldr	r3, [pc, #188]	; (800512c <HAL_RCC_OscConfig+0x270>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	492c      	ldr	r1, [pc, #176]	; (800512c <HAL_RCC_OscConfig+0x270>)
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
 8005080:	e01a      	b.n	80050b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a29      	ldr	r2, [pc, #164]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800508e:	f7fd fd7b 	bl	8002b88 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005096:	f7fd fd77 	bl	8002b88 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e2dd      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCC_OscConfig+0x1da>
 80050b4:	e000      	b.n	80050b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d074      	beq.n	80051ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d005      	beq.n	80050d6 <HAL_RCC_OscConfig+0x21a>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d10e      	bne.n	80050ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d10b      	bne.n	80050ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_RCC_OscConfig+0x270>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d064      	beq.n	80051ac <HAL_RCC_OscConfig+0x2f0>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d160      	bne.n	80051ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e2ba      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_OscConfig+0x24a>
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_RCC_OscConfig+0x270>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <HAL_RCC_OscConfig+0x270>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e026      	b.n	8005154 <HAL_RCC_OscConfig+0x298>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800510e:	d115      	bne.n	800513c <HAL_RCC_OscConfig+0x280>
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a05      	ldr	r2, [pc, #20]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_OscConfig+0x270>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a02      	ldr	r2, [pc, #8]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e014      	b.n	8005154 <HAL_RCC_OscConfig+0x298>
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	080070dc 	.word	0x080070dc
 8005134:	20000000 	.word	0x20000000
 8005138:	20000004 	.word	0x20000004
 800513c:	4ba0      	ldr	r3, [pc, #640]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a9f      	ldr	r2, [pc, #636]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	4b9d      	ldr	r3, [pc, #628]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a9c      	ldr	r2, [pc, #624]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800514e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d013      	beq.n	8005184 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd fd14 	bl	8002b88 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005164:	f7fd fd10 	bl	8002b88 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e276      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005176:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x2a8>
 8005182:	e014      	b.n	80051ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd fd00 	bl	8002b88 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800518c:	f7fd fcfc 	bl	8002b88 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	; 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e262      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x2d0>
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d060      	beq.n	800527c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d005      	beq.n	80051cc <HAL_RCC_OscConfig+0x310>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b0c      	cmp	r3, #12
 80051c4:	d119      	bne.n	80051fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d116      	bne.n	80051fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051cc:	4b7c      	ldr	r3, [pc, #496]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_OscConfig+0x328>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e23f      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e4:	4b76      	ldr	r3, [pc, #472]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	4973      	ldr	r1, [pc, #460]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f8:	e040      	b.n	800527c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d023      	beq.n	800524a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005202:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a6e      	ldr	r2, [pc, #440]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fd fcbb 	bl	8002b88 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005216:	f7fd fcb7 	bl	8002b88 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e21d      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005228:	4b65      	ldr	r3, [pc, #404]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005234:	4b62      	ldr	r3, [pc, #392]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	495f      	ldr	r1, [pc, #380]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
 8005248:	e018      	b.n	800527c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524a:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a5c      	ldr	r2, [pc, #368]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fd fc97 	bl	8002b88 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525e:	f7fd fc93 	bl	8002b88 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1f9      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005270:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d03c      	beq.n	8005302 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01c      	beq.n	80052ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005296:	4a4a      	ldr	r2, [pc, #296]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a0:	f7fd fc72 	bl	8002b88 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fd fc6e 	bl	8002b88 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1d4      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052ba:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ef      	beq.n	80052a8 <HAL_RCC_OscConfig+0x3ec>
 80052c8:	e01b      	b.n	8005302 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ca:	4b3d      	ldr	r3, [pc, #244]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80052cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d0:	4a3b      	ldr	r2, [pc, #236]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052da:	f7fd fc55 	bl	8002b88 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e2:	f7fd fc51 	bl	8002b88 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1b7      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f4:	4b32      	ldr	r3, [pc, #200]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80052f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ef      	bne.n	80052e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80a6 	beq.w	800545c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005310:	2300      	movs	r3, #0
 8005312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005314:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10d      	bne.n	800533c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005320:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532a:	6593      	str	r3, [r2, #88]	; 0x58
 800532c:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005338:	2301      	movs	r3, #1
 800533a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <HAL_RCC_OscConfig+0x508>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d118      	bne.n	800537a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005348:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_RCC_OscConfig+0x508>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <HAL_RCC_OscConfig+0x508>)
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005354:	f7fd fc18 	bl	8002b88 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535c:	f7fd fc14 	bl	8002b88 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e17a      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_RCC_OscConfig+0x508>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d108      	bne.n	8005394 <HAL_RCC_OscConfig+0x4d8>
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005392:	e029      	b.n	80053e8 <HAL_RCC_OscConfig+0x52c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b05      	cmp	r3, #5
 800539a:	d115      	bne.n	80053c8 <HAL_RCC_OscConfig+0x50c>
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80053a4:	f043 0304 	orr.w	r3, r3, #4
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	4a03      	ldr	r2, [pc, #12]	; (80053c0 <HAL_RCC_OscConfig+0x504>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053bc:	e014      	b.n	80053e8 <HAL_RCC_OscConfig+0x52c>
 80053be:	bf00      	nop
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40007000 	.word	0x40007000
 80053c8:	4b9c      	ldr	r3, [pc, #624]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	4a9b      	ldr	r2, [pc, #620]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053d8:	4b98      	ldr	r3, [pc, #608]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	4a97      	ldr	r2, [pc, #604]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d016      	beq.n	800541e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7fd fbca 	bl	8002b88 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f6:	e00a      	b.n	800540e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f7fd fbc6 	bl	8002b88 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	; 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e12a      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	4b8b      	ldr	r3, [pc, #556]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ed      	beq.n	80053f8 <HAL_RCC_OscConfig+0x53c>
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541e:	f7fd fbb3 	bl	8002b88 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005424:	e00a      	b.n	800543c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005426:	f7fd fbaf 	bl	8002b88 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f241 3288 	movw	r2, #5000	; 0x1388
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e113      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800543c:	4b7f      	ldr	r3, [pc, #508]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ed      	bne.n	8005426 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b7a      	ldr	r3, [pc, #488]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	4a79      	ldr	r2, [pc, #484]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80fe 	beq.w	8005662 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	2b02      	cmp	r3, #2
 800546c:	f040 80d0 	bne.w	8005610 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005470:	4b72      	ldr	r3, [pc, #456]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f003 0203 	and.w	r2, r3, #3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	429a      	cmp	r2, r3
 8005482:	d130      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	3b01      	subs	r3, #1
 8005490:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d127      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d11f      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054b0:	2a07      	cmp	r2, #7
 80054b2:	bf14      	ite	ne
 80054b4:	2201      	movne	r2, #1
 80054b6:	2200      	moveq	r2, #0
 80054b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d113      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	3b01      	subs	r3, #1
 80054cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d109      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	3b01      	subs	r3, #1
 80054e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d06e      	beq.n	80055c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d069      	beq.n	80055c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054ec:	4b53      	ldr	r3, [pc, #332]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054f8:	4b50      	ldr	r3, [pc, #320]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0ad      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005508:	4b4c      	ldr	r3, [pc, #304]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a4b      	ldr	r2, [pc, #300]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800550e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005512:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005514:	f7fd fb38 	bl	8002b88 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fd fb34 	bl	8002b88 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e09a      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552e:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800553a:	4b40      	ldr	r3, [pc, #256]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	4b40      	ldr	r3, [pc, #256]	; (8005640 <HAL_RCC_OscConfig+0x784>)
 8005540:	4013      	ands	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800554a:	3a01      	subs	r2, #1
 800554c:	0112      	lsls	r2, r2, #4
 800554e:	4311      	orrs	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005554:	0212      	lsls	r2, r2, #8
 8005556:	4311      	orrs	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800555c:	0852      	lsrs	r2, r2, #1
 800555e:	3a01      	subs	r2, #1
 8005560:	0552      	lsls	r2, r2, #21
 8005562:	4311      	orrs	r1, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005568:	0852      	lsrs	r2, r2, #1
 800556a:	3a01      	subs	r2, #1
 800556c:	0652      	lsls	r2, r2, #25
 800556e:	4311      	orrs	r1, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005574:	0912      	lsrs	r2, r2, #4
 8005576:	0452      	lsls	r2, r2, #17
 8005578:	430a      	orrs	r2, r1
 800557a:	4930      	ldr	r1, [pc, #192]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800557c:	4313      	orrs	r3, r2
 800557e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005580:	4b2e      	ldr	r3, [pc, #184]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2d      	ldr	r2, [pc, #180]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a2a      	ldr	r2, [pc, #168]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005596:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005598:	f7fd faf6 	bl	8002b88 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fd faf2 	bl	8002b88 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e058      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055be:	e050      	b.n	8005662 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e04f      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d148      	bne.n	8005662 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a19      	ldr	r2, [pc, #100]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80055d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_RCC_OscConfig+0x780>)
 80055e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055e8:	f7fd face 	bl	8002b88 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fd faca 	bl	8002b88 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e030      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005602:	4b0e      	ldr	r3, [pc, #56]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x734>
 800560e:	e028      	b.n	8005662 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b0c      	cmp	r3, #12
 8005614:	d023      	beq.n	800565e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_RCC_OscConfig+0x780>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a08      	ldr	r2, [pc, #32]	; (800563c <HAL_RCC_OscConfig+0x780>)
 800561c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005622:	f7fd fab1 	bl	8002b88 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	e00c      	b.n	8005644 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562a:	f7fd faad 	bl	8002b88 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d905      	bls.n	8005644 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e013      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
 800563c:	40021000 	.word	0x40021000
 8005640:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <HAL_RCC_OscConfig+0x7b0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ec      	bne.n	800562a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_RCC_OscConfig+0x7b0>)
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	4905      	ldr	r1, [pc, #20]	; (800566c <HAL_RCC_OscConfig+0x7b0>)
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_OscConfig+0x7b4>)
 8005658:	4013      	ands	r3, r2
 800565a:	60cb      	str	r3, [r1, #12]
 800565c:	e001      	b.n	8005662 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000
 8005670:	feeefffc 	.word	0xfeeefffc

08005674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0e7      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005688:	4b75      	ldr	r3, [pc, #468]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d910      	bls.n	80056b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b72      	ldr	r3, [pc, #456]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 0207 	bic.w	r2, r3, #7
 800569e:	4970      	ldr	r1, [pc, #448]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a6:	4b6e      	ldr	r3, [pc, #440]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0cf      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d010      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	4b66      	ldr	r3, [pc, #408]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d908      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d4:	4b63      	ldr	r3, [pc, #396]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4960      	ldr	r1, [pc, #384]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d04c      	beq.n	800578c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d107      	bne.n	800570a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fa:	4b5a      	ldr	r3, [pc, #360]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d121      	bne.n	800574a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0a6      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005712:	4b54      	ldr	r3, [pc, #336]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d115      	bne.n	800574a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e09a      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800572a:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e08e      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800573a:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e086      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800574a:	4b46      	ldr	r3, [pc, #280]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f023 0203 	bic.w	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	4943      	ldr	r1, [pc, #268]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 8005758:	4313      	orrs	r3, r2
 800575a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575c:	f7fd fa14 	bl	8002b88 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005762:	e00a      	b.n	800577a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005764:	f7fd fa10 	bl	8002b88 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e06e      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577a:	4b3a      	ldr	r3, [pc, #232]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 020c 	and.w	r2, r3, #12
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	429a      	cmp	r2, r3
 800578a:	d1eb      	bne.n	8005764 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	4b31      	ldr	r3, [pc, #196]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d208      	bcs.n	80057ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a8:	4b2e      	ldr	r3, [pc, #184]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	492b      	ldr	r1, [pc, #172]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d210      	bcs.n	80057ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 0207 	bic.w	r2, r3, #7
 80057d0:	4923      	ldr	r1, [pc, #140]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d8:	4b21      	ldr	r3, [pc, #132]	; (8005860 <HAL_RCC_ClockConfig+0x1ec>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d001      	beq.n	80057ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e036      	b.n	8005858 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f6:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4918      	ldr	r1, [pc, #96]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005814:	4b13      	ldr	r3, [pc, #76]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4910      	ldr	r1, [pc, #64]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 8005824:	4313      	orrs	r3, r2
 8005826:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005828:	f000 f824 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <HAL_RCC_ClockConfig+0x1f0>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	091b      	lsrs	r3, r3, #4
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	490b      	ldr	r1, [pc, #44]	; (8005868 <HAL_RCC_ClockConfig+0x1f4>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
 8005844:	4a09      	ldr	r2, [pc, #36]	; (800586c <HAL_RCC_ClockConfig+0x1f8>)
 8005846:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <HAL_RCC_ClockConfig+0x1fc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd f94b 	bl	8002ae8 <HAL_InitTick>
 8005852:	4603      	mov	r3, r0
 8005854:	72fb      	strb	r3, [r7, #11]

  return status;
 8005856:	7afb      	ldrb	r3, [r7, #11]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40022000 	.word	0x40022000
 8005864:	40021000 	.word	0x40021000
 8005868:	080070dc 	.word	0x080070dc
 800586c:	20000000 	.word	0x20000000
 8005870:	20000004 	.word	0x20000004

08005874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	; 0x24
 8005878:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005882:	4b3e      	ldr	r3, [pc, #248]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800588c:	4b3b      	ldr	r3, [pc, #236]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x34>
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d121      	bne.n	80058e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d11e      	bne.n	80058e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058b4:	4b31      	ldr	r3, [pc, #196]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 80058b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e005      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058d0:	4a2b      	ldr	r2, [pc, #172]	; (8005980 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058ec:	4b25      	ldr	r3, [pc, #148]	; (8005984 <HAL_RCC_GetSysClockFreq+0x110>)
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e004      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d101      	bne.n	80058fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f8:	4b23      	ldr	r3, [pc, #140]	; (8005988 <HAL_RCC_GetSysClockFreq+0x114>)
 80058fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d134      	bne.n	800596c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005902:	4b1e      	ldr	r3, [pc, #120]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d003      	beq.n	800591a <HAL_RCC_GetSysClockFreq+0xa6>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d003      	beq.n	8005920 <HAL_RCC_GetSysClockFreq+0xac>
 8005918:	e005      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <HAL_RCC_GetSysClockFreq+0x110>)
 800591c:	617b      	str	r3, [r7, #20]
      break;
 800591e:	e005      	b.n	800592c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <HAL_RCC_GetSysClockFreq+0x114>)
 8005922:	617b      	str	r3, [r7, #20]
      break;
 8005924:	e002      	b.n	800592c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	617b      	str	r3, [r7, #20]
      break;
 800592a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800592c:	4b13      	ldr	r3, [pc, #76]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	3301      	adds	r3, #1
 8005938:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800593a:	4b10      	ldr	r3, [pc, #64]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	fb03 f202 	mul.w	r2, r3, r2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCC_GetSysClockFreq+0x108>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	0e5b      	lsrs	r3, r3, #25
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	3301      	adds	r3, #1
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800596c:	69bb      	ldr	r3, [r7, #24]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3724      	adds	r7, #36	; 0x24
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	080070ec 	.word	0x080070ec
 8005984:	00f42400 	.word	0x00f42400
 8005988:	007a1200 	.word	0x007a1200

0800598c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059a4:	f7ff fa26 	bl	8004df4 <HAL_PWREx_GetVoltageRange>
 80059a8:	6178      	str	r0, [r7, #20]
 80059aa:	e014      	b.n	80059d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	4a24      	ldr	r2, [pc, #144]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6593      	str	r3, [r2, #88]	; 0x58
 80059b8:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059c4:	f7ff fa16 	bl	8004df4 <HAL_PWREx_GetVoltageRange>
 80059c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059dc:	d10b      	bne.n	80059f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d919      	bls.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2ba0      	cmp	r3, #160	; 0xa0
 80059e8:	d902      	bls.n	80059f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059ea:	2302      	movs	r3, #2
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e013      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059f0:	2301      	movs	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	e010      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d902      	bls.n	8005a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059fc:	2303      	movs	r3, #3
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e00a      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b80      	cmp	r3, #128	; 0x80
 8005a06:	d102      	bne.n	8005a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a08:	2302      	movs	r3, #2
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e004      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b70      	cmp	r3, #112	; 0x70
 8005a12:	d101      	bne.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a14:	2301      	movs	r3, #1
 8005a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f023 0207 	bic.w	r2, r3, #7
 8005a20:	4909      	ldr	r1, [pc, #36]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a28:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d001      	beq.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40022000 	.word	0x40022000

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a54:	2300      	movs	r3, #0
 8005a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a58:	2300      	movs	r3, #0
 8005a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d041      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a70:	d02a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a76:	d824      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a7c:	d008      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a82:	d81e      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8c:	d010      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a8e:	e018      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a90:	4b86      	ldr	r3, [pc, #536]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a85      	ldr	r2, [pc, #532]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a9c:	e015      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fabb 	bl	8006020 <RCCEx_PLLSAI1_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aae:	e00c      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3320      	adds	r3, #32
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fba6 	bl	8006208 <RCCEx_PLLSAI2_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ac0:	e003      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8005ac6:	e000      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ad0:	4b76      	ldr	r3, [pc, #472]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ade:	4973      	ldr	r1, [pc, #460]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ae6:	e001      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d041      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b00:	d02a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b06:	d824      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b0c:	d008      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b12:	d81e      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b1c:	d010      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b1e:	e018      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b20:	4b62      	ldr	r3, [pc, #392]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a61      	ldr	r2, [pc, #388]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b2c:	e015      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fa73 	bl	8006020 <RCCEx_PLLSAI1_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b3e:	e00c      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3320      	adds	r3, #32
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb5e 	bl	8006208 <RCCEx_PLLSAI2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	74fb      	strb	r3, [r7, #19]
      break;
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b60:	4b52      	ldr	r3, [pc, #328]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6e:	494f      	ldr	r1, [pc, #316]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b76:	e001      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	7cfb      	ldrb	r3, [r7, #19]
 8005b7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a0 	beq.w	8005cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba4:	4b41      	ldr	r3, [pc, #260]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	4a40      	ldr	r2, [pc, #256]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bae:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb0:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc0:	4b3b      	ldr	r3, [pc, #236]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a3a      	ldr	r2, [pc, #232]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bcc:	f7fc ffdc 	bl	8002b88 <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bd2:	e009      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd4:	f7fc ffd8 	bl	8002b88 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d902      	bls.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	74fb      	strb	r3, [r7, #19]
        break;
 8005be6:	e005      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005be8:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0ef      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d15c      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bfa:	4b2c      	ldr	r3, [pc, #176]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01f      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d019      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c18:	4b24      	ldr	r3, [pc, #144]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c24:	4b21      	ldr	r3, [pc, #132]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a20      	ldr	r2, [pc, #128]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fc ff97 	bl	8002b88 <HAL_GetTick>
 8005c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5c:	e00b      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fc ff93 	bl	8002b88 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d902      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	74fb      	strb	r3, [r7, #19]
            break;
 8005c74:	e006      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0ec      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c84:	7cfb      	ldrb	r3, [r7, #19]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c8a:	4b08      	ldr	r3, [pc, #32]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9a:	4904      	ldr	r1, [pc, #16]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ca2:	e009      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	74bb      	strb	r3, [r7, #18]
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005caa:	bf00      	nop
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	7cfb      	ldrb	r3, [r7, #19]
 8005cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cb8:	7c7b      	ldrb	r3, [r7, #17]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d105      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cbe:	4b9e      	ldr	r3, [pc, #632]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	4a9d      	ldr	r2, [pc, #628]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cd6:	4b98      	ldr	r3, [pc, #608]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	f023 0203 	bic.w	r2, r3, #3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	4994      	ldr	r1, [pc, #592]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cf8:	4b8f      	ldr	r3, [pc, #572]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f023 020c 	bic.w	r2, r3, #12
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	498c      	ldr	r1, [pc, #560]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d1a:	4b87      	ldr	r3, [pc, #540]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	4983      	ldr	r1, [pc, #524]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d3c:	4b7e      	ldr	r3, [pc, #504]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	497b      	ldr	r1, [pc, #492]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d5e:	4b76      	ldr	r3, [pc, #472]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6c:	4972      	ldr	r1, [pc, #456]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d80:	4b6d      	ldr	r3, [pc, #436]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	496a      	ldr	r1, [pc, #424]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005da2:	4b65      	ldr	r3, [pc, #404]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db0:	4961      	ldr	r1, [pc, #388]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dc4:	4b5c      	ldr	r3, [pc, #368]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd2:	4959      	ldr	r1, [pc, #356]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005de6:	4b54      	ldr	r3, [pc, #336]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	4950      	ldr	r1, [pc, #320]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e08:	4b4b      	ldr	r3, [pc, #300]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	4948      	ldr	r1, [pc, #288]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e2a:	4b43      	ldr	r3, [pc, #268]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	493f      	ldr	r1, [pc, #252]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d028      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e4c:	4b3a      	ldr	r3, [pc, #232]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5a:	4937      	ldr	r1, [pc, #220]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e6a:	d106      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a31      	ldr	r2, [pc, #196]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e76:	60d3      	str	r3, [r2, #12]
 8005e78:	e011      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e82:	d10c      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f8c8 	bl	8006020 <RCCEx_PLLSAI1_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d028      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005eaa:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	491f      	ldr	r1, [pc, #124]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed4:	60d3      	str	r3, [r2, #12]
 8005ed6:	e011      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ee0:	d10c      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 f899 	bl	8006020 <RCCEx_PLLSAI1_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ef2:	7cfb      	ldrb	r3, [r7, #19]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ef8:	7cfb      	ldrb	r3, [r7, #19]
 8005efa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02b      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f16:	4908      	ldr	r1, [pc, #32]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f26:	d109      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a02      	ldr	r2, [pc, #8]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f32:	60d3      	str	r3, [r2, #12]
 8005f34:	e014      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f867 	bl	8006020 <RCCEx_PLLSAI1_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d02f      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f6c:	4b2b      	ldr	r3, [pc, #172]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7a:	4928      	ldr	r1, [pc, #160]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8a:	d10d      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	2102      	movs	r1, #2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f844 	bl	8006020 <RCCEx_PLLSAI1_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f9c:	7cfb      	ldrb	r3, [r7, #19]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d014      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fa2:	7cfb      	ldrb	r3, [r7, #19]
 8005fa4:	74bb      	strb	r3, [r7, #18]
 8005fa6:	e011      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3320      	adds	r3, #32
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f925 	bl	8006208 <RCCEx_PLLSAI2_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe6:	490d      	ldr	r1, [pc, #52]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800600a:	4904      	ldr	r1, [pc, #16]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006012:	7cbb      	ldrb	r3, [r7, #18]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40021000 	.word	0x40021000

08006020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800602e:	4b75      	ldr	r3, [pc, #468]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d018      	beq.n	800606c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800603a:	4b72      	ldr	r3, [pc, #456]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f003 0203 	and.w	r2, r3, #3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d10d      	bne.n	8006066 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
       ||
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006052:	4b6c      	ldr	r3, [pc, #432]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	091b      	lsrs	r3, r3, #4
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
       ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d047      	beq.n	80060f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
 800606a:	e044      	b.n	80060f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d018      	beq.n	80060a6 <RCCEx_PLLSAI1_Config+0x86>
 8006074:	2b03      	cmp	r3, #3
 8006076:	d825      	bhi.n	80060c4 <RCCEx_PLLSAI1_Config+0xa4>
 8006078:	2b01      	cmp	r3, #1
 800607a:	d002      	beq.n	8006082 <RCCEx_PLLSAI1_Config+0x62>
 800607c:	2b02      	cmp	r3, #2
 800607e:	d009      	beq.n	8006094 <RCCEx_PLLSAI1_Config+0x74>
 8006080:	e020      	b.n	80060c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006082:	4b60      	ldr	r3, [pc, #384]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d11d      	bne.n	80060ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006092:	e01a      	b.n	80060ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006094:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609c:	2b00      	cmp	r3, #0
 800609e:	d116      	bne.n	80060ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a4:	e013      	b.n	80060ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060a6:	4b57      	ldr	r3, [pc, #348]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060b2:	4b54      	ldr	r3, [pc, #336]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060c2:	e006      	b.n	80060d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e004      	b.n	80060d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10d      	bne.n	80060f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060da:	4b4a      	ldr	r3, [pc, #296]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6819      	ldr	r1, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	430b      	orrs	r3, r1
 80060f0:	4944      	ldr	r1, [pc, #272]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d17d      	bne.n	80061f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060fc:	4b41      	ldr	r3, [pc, #260]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a40      	ldr	r2, [pc, #256]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006108:	f7fc fd3e 	bl	8002b88 <HAL_GetTick>
 800610c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800610e:	e009      	b.n	8006124 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006110:	f7fc fd3a 	bl	8002b88 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d902      	bls.n	8006124 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	73fb      	strb	r3, [r7, #15]
        break;
 8006122:	e005      	b.n	8006130 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006124:	4b37      	ldr	r3, [pc, #220]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1ef      	bne.n	8006110 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d160      	bne.n	80061f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d111      	bne.n	8006160 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800613c:	4b31      	ldr	r3, [pc, #196]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6892      	ldr	r2, [r2, #8]
 800614c:	0211      	lsls	r1, r2, #8
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	0912      	lsrs	r2, r2, #4
 8006154:	0452      	lsls	r2, r2, #17
 8006156:	430a      	orrs	r2, r1
 8006158:	492a      	ldr	r1, [pc, #168]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800615a:	4313      	orrs	r3, r2
 800615c:	610b      	str	r3, [r1, #16]
 800615e:	e027      	b.n	80061b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d112      	bne.n	800618c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800616e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6892      	ldr	r2, [r2, #8]
 8006176:	0211      	lsls	r1, r2, #8
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6912      	ldr	r2, [r2, #16]
 800617c:	0852      	lsrs	r2, r2, #1
 800617e:	3a01      	subs	r2, #1
 8006180:	0552      	lsls	r2, r2, #21
 8006182:	430a      	orrs	r2, r1
 8006184:	491f      	ldr	r1, [pc, #124]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006186:	4313      	orrs	r3, r2
 8006188:	610b      	str	r3, [r1, #16]
 800618a:	e011      	b.n	80061b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800618c:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006194:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6892      	ldr	r2, [r2, #8]
 800619c:	0211      	lsls	r1, r2, #8
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6952      	ldr	r2, [r2, #20]
 80061a2:	0852      	lsrs	r2, r2, #1
 80061a4:	3a01      	subs	r2, #1
 80061a6:	0652      	lsls	r2, r2, #25
 80061a8:	430a      	orrs	r2, r1
 80061aa:	4916      	ldr	r1, [pc, #88]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061b0:	4b14      	ldr	r3, [pc, #80]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a13      	ldr	r2, [pc, #76]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fc fce4 	bl	8002b88 <HAL_GetTick>
 80061c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061c2:	e009      	b.n	80061d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061c4:	f7fc fce0 	bl	8002b88 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d902      	bls.n	80061d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	73fb      	strb	r3, [r7, #15]
          break;
 80061d6:	e005      	b.n	80061e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0ef      	beq.n	80061c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	4904      	ldr	r1, [pc, #16]	; (8006204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000

08006208 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006216:	4b6a      	ldr	r3, [pc, #424]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006222:	4b67      	ldr	r3, [pc, #412]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0203 	and.w	r2, r3, #3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d10d      	bne.n	800624e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
       ||
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800623a:	4b61      	ldr	r3, [pc, #388]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	091b      	lsrs	r3, r3, #4
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
       ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d047      	beq.n	80062de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e044      	b.n	80062de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d018      	beq.n	800628e <RCCEx_PLLSAI2_Config+0x86>
 800625c:	2b03      	cmp	r3, #3
 800625e:	d825      	bhi.n	80062ac <RCCEx_PLLSAI2_Config+0xa4>
 8006260:	2b01      	cmp	r3, #1
 8006262:	d002      	beq.n	800626a <RCCEx_PLLSAI2_Config+0x62>
 8006264:	2b02      	cmp	r3, #2
 8006266:	d009      	beq.n	800627c <RCCEx_PLLSAI2_Config+0x74>
 8006268:	e020      	b.n	80062ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800626a:	4b55      	ldr	r3, [pc, #340]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11d      	bne.n	80062b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800627a:	e01a      	b.n	80062b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800627c:	4b50      	ldr	r3, [pc, #320]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006284:	2b00      	cmp	r3, #0
 8006286:	d116      	bne.n	80062b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800628c:	e013      	b.n	80062b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10f      	bne.n	80062ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800629a:	4b49      	ldr	r3, [pc, #292]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062aa:	e006      	b.n	80062ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
      break;
 80062b0:	e004      	b.n	80062bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062b2:	bf00      	nop
 80062b4:	e002      	b.n	80062bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062b6:	bf00      	nop
 80062b8:	e000      	b.n	80062bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062c2:	4b3f      	ldr	r3, [pc, #252]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6819      	ldr	r1, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	430b      	orrs	r3, r1
 80062d8:	4939      	ldr	r1, [pc, #228]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d167      	bne.n	80063b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062e4:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a35      	ldr	r2, [pc, #212]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f0:	f7fc fc4a 	bl	8002b88 <HAL_GetTick>
 80062f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062f6:	e009      	b.n	800630c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062f8:	f7fc fc46 	bl	8002b88 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d902      	bls.n	800630c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	73fb      	strb	r3, [r7, #15]
        break;
 800630a:	e005      	b.n	8006318 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800630c:	4b2c      	ldr	r3, [pc, #176]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1ef      	bne.n	80062f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d14a      	bne.n	80063b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d111      	bne.n	8006348 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006324:	4b26      	ldr	r3, [pc, #152]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800632c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6892      	ldr	r2, [r2, #8]
 8006334:	0211      	lsls	r1, r2, #8
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68d2      	ldr	r2, [r2, #12]
 800633a:	0912      	lsrs	r2, r2, #4
 800633c:	0452      	lsls	r2, r2, #17
 800633e:	430a      	orrs	r2, r1
 8006340:	491f      	ldr	r1, [pc, #124]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006342:	4313      	orrs	r3, r2
 8006344:	614b      	str	r3, [r1, #20]
 8006346:	e011      	b.n	800636c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006348:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6892      	ldr	r2, [r2, #8]
 8006358:	0211      	lsls	r1, r2, #8
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6912      	ldr	r2, [r2, #16]
 800635e:	0852      	lsrs	r2, r2, #1
 8006360:	3a01      	subs	r2, #1
 8006362:	0652      	lsls	r2, r2, #25
 8006364:	430a      	orrs	r2, r1
 8006366:	4916      	ldr	r1, [pc, #88]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006368:	4313      	orrs	r3, r2
 800636a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fc fc06 	bl	8002b88 <HAL_GetTick>
 800637c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800637e:	e009      	b.n	8006394 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006380:	f7fc fc02 	bl	8002b88 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d902      	bls.n	8006394 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	73fb      	strb	r3, [r7, #15]
          break;
 8006392:	e005      	b.n	80063a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0ef      	beq.n	8006380 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	4904      	ldr	r1, [pc, #16]	; (80063c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000

080063c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e049      	b.n	800646a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fc fa66 	bl	80028bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 f9d0 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	d001      	beq.n	800648c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e04f      	b.n	800652c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a23      	ldr	r2, [pc, #140]	; (8006538 <HAL_TIM_Base_Start_IT+0xc4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01d      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x76>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b6:	d018      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x76>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1f      	ldr	r2, [pc, #124]	; (800653c <HAL_TIM_Base_Start_IT+0xc8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x76>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <HAL_TIM_Base_Start_IT+0xcc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x76>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <HAL_TIM_Base_Start_IT+0xd0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x76>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <HAL_TIM_Base_Start_IT+0xd4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0x76>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a19      	ldr	r2, [pc, #100]	; (800654c <HAL_TIM_Base_Start_IT+0xd8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d115      	bne.n	8006516 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <HAL_TIM_Base_Start_IT+0xdc>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d015      	beq.n	8006528 <HAL_TIM_Base_Start_IT+0xb4>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006502:	d011      	beq.n	8006528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006514:	e008      	b.n	8006528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e000      	b.n	800652a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006528:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40013400 	.word	0x40013400
 800654c:	40014000 	.word	0x40014000
 8006550:	00010007 	.word	0x00010007

08006554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d020      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01b      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0202 	mvn.w	r2, #2
 8006588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8e4 	bl	800676c <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8d6 	bl	8006758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f8e7 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d020      	beq.n	8006604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0204 	mvn.w	r2, #4
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8be 	bl	800676c <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f8b0 	bl	8006758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f8c1 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d020      	beq.n	8006650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01b      	beq.n	8006650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0208 	mvn.w	r2, #8
 8006620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2204      	movs	r2, #4
 8006626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f898 	bl	800676c <HAL_TIM_IC_CaptureCallback>
 800663c:	e005      	b.n	800664a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f88a 	bl	8006758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f89b 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d020      	beq.n	800669c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01b      	beq.n	800669c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0210 	mvn.w	r2, #16
 800666c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2208      	movs	r2, #8
 8006672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f872 	bl	800676c <HAL_TIM_IC_CaptureCallback>
 8006688:	e005      	b.n	8006696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f864 	bl	8006758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f875 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0201 	mvn.w	r2, #1
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb fee4 	bl	8002488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f98e 	bl	8006a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f986 	bl	8006a14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f834 	bl	8006794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0220 	mvn.w	r2, #32
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f94e 	bl	80069ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a40      	ldr	r2, [pc, #256]	; (80068bc <TIM_Base_SetConfig+0x114>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c6:	d00f      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3d      	ldr	r2, [pc, #244]	; (80068c0 <TIM_Base_SetConfig+0x118>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3c      	ldr	r2, [pc, #240]	; (80068c4 <TIM_Base_SetConfig+0x11c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3b      	ldr	r2, [pc, #236]	; (80068c8 <TIM_Base_SetConfig+0x120>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3a      	ldr	r2, [pc, #232]	; (80068cc <TIM_Base_SetConfig+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d108      	bne.n	80067fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <TIM_Base_SetConfig+0x114>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01f      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006808:	d01b      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2c      	ldr	r2, [pc, #176]	; (80068c0 <TIM_Base_SetConfig+0x118>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d017      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2b      	ldr	r2, [pc, #172]	; (80068c4 <TIM_Base_SetConfig+0x11c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2a      	ldr	r2, [pc, #168]	; (80068c8 <TIM_Base_SetConfig+0x120>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00f      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a29      	ldr	r2, [pc, #164]	; (80068cc <TIM_Base_SetConfig+0x124>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00b      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a28      	ldr	r2, [pc, #160]	; (80068d0 <TIM_Base_SetConfig+0x128>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d007      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <TIM_Base_SetConfig+0x12c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d003      	beq.n	8006842 <TIM_Base_SetConfig+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a26      	ldr	r2, [pc, #152]	; (80068d8 <TIM_Base_SetConfig+0x130>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d108      	bne.n	8006854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <TIM_Base_SetConfig+0x114>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00f      	beq.n	80068a0 <TIM_Base_SetConfig+0xf8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a12      	ldr	r2, [pc, #72]	; (80068cc <TIM_Base_SetConfig+0x124>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00b      	beq.n	80068a0 <TIM_Base_SetConfig+0xf8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a11      	ldr	r2, [pc, #68]	; (80068d0 <TIM_Base_SetConfig+0x128>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <TIM_Base_SetConfig+0xf8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a10      	ldr	r2, [pc, #64]	; (80068d4 <TIM_Base_SetConfig+0x12c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0f      	ldr	r2, [pc, #60]	; (80068d8 <TIM_Base_SetConfig+0x130>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d103      	bne.n	80068a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	615a      	str	r2, [r3, #20]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40013400 	.word	0x40013400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e068      	b.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2e      	ldr	r2, [pc, #184]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2d      	ldr	r2, [pc, #180]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800692e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01d      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d018      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1a      	ldr	r2, [pc, #104]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10c      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	40014000 	.word	0x40014000

080069ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <__errno>:
 8006a38:	4b01      	ldr	r3, [pc, #4]	; (8006a40 <__errno+0x8>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000058 	.word	0x20000058

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4d0d      	ldr	r5, [pc, #52]	; (8006a7c <__libc_init_array+0x38>)
 8006a48:	4c0d      	ldr	r4, [pc, #52]	; (8006a80 <__libc_init_array+0x3c>)
 8006a4a:	1b64      	subs	r4, r4, r5
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	2600      	movs	r6, #0
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	4d0b      	ldr	r5, [pc, #44]	; (8006a84 <__libc_init_array+0x40>)
 8006a56:	4c0c      	ldr	r4, [pc, #48]	; (8006a88 <__libc_init_array+0x44>)
 8006a58:	f000 faa8 	bl	8006fac <_init>
 8006a5c:	1b64      	subs	r4, r4, r5
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	2600      	movs	r6, #0
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6c:	4798      	blx	r3
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a76:	4798      	blx	r3
 8006a78:	3601      	adds	r6, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08007120 	.word	0x08007120
 8006a80:	08007120 	.word	0x08007120
 8006a84:	08007120 	.word	0x08007120
 8006a88:	08007124 	.word	0x08007124

08006a8c <memcpy>:
 8006a8c:	440a      	add	r2, r1
 8006a8e:	4291      	cmp	r1, r2
 8006a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a94:	d100      	bne.n	8006a98 <memcpy+0xc>
 8006a96:	4770      	bx	lr
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa2:	4291      	cmp	r1, r2
 8006aa4:	d1f9      	bne.n	8006a9a <memcpy+0xe>
 8006aa6:	bd10      	pop	{r4, pc}

08006aa8 <log>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	ed2d 8b02 	vpush	{d8}
 8006aae:	ec55 4b10 	vmov	r4, r5, d0
 8006ab2:	f000 f8c1 	bl	8006c38 <__ieee754_log>
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	462b      	mov	r3, r5
 8006aba:	4620      	mov	r0, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	eeb0 8a40 	vmov.f32	s16, s0
 8006ac2:	eef0 8a60 	vmov.f32	s17, s1
 8006ac6:	f7f9 ffd5 	bl	8000a74 <__aeabi_dcmpun>
 8006aca:	b998      	cbnz	r0, 8006af4 <log+0x4c>
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f7f9 ffc4 	bl	8000a60 <__aeabi_dcmpgt>
 8006ad8:	b960      	cbnz	r0, 8006af4 <log+0x4c>
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7f9 ff95 	bl	8000a10 <__aeabi_dcmpeq>
 8006ae6:	b160      	cbz	r0, 8006b02 <log+0x5a>
 8006ae8:	f7ff ffa6 	bl	8006a38 <__errno>
 8006aec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8006b18 <log+0x70>
 8006af0:	2322      	movs	r3, #34	; 0x22
 8006af2:	6003      	str	r3, [r0, #0]
 8006af4:	eeb0 0a48 	vmov.f32	s0, s16
 8006af8:	eef0 0a68 	vmov.f32	s1, s17
 8006afc:	ecbd 8b02 	vpop	{d8}
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
 8006b02:	f7ff ff99 	bl	8006a38 <__errno>
 8006b06:	ecbd 8b02 	vpop	{d8}
 8006b0a:	2321      	movs	r3, #33	; 0x21
 8006b0c:	6003      	str	r3, [r0, #0]
 8006b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b12:	4803      	ldr	r0, [pc, #12]	; (8006b20 <log+0x78>)
 8006b14:	f000 b808 	b.w	8006b28 <nan>
 8006b18:	00000000 	.word	0x00000000
 8006b1c:	fff00000 	.word	0xfff00000
 8006b20:	0800711c 	.word	0x0800711c
 8006b24:	00000000 	.word	0x00000000

08006b28 <nan>:
 8006b28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006b30 <nan+0x8>
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	00000000 	.word	0x00000000
 8006b34:	7ff80000 	.word	0x7ff80000

08006b38 <floor>:
 8006b38:	ec51 0b10 	vmov	r0, r1, d0
 8006b3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006b48:	2e13      	cmp	r6, #19
 8006b4a:	ee10 5a10 	vmov	r5, s0
 8006b4e:	ee10 8a10 	vmov	r8, s0
 8006b52:	460c      	mov	r4, r1
 8006b54:	dc31      	bgt.n	8006bba <floor+0x82>
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	da14      	bge.n	8006b84 <floor+0x4c>
 8006b5a:	a333      	add	r3, pc, #204	; (adr r3, 8006c28 <floor+0xf0>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fb38 	bl	80001d4 <__adddf3>
 8006b64:	2200      	movs	r2, #0
 8006b66:	2300      	movs	r3, #0
 8006b68:	f7f9 ff7a 	bl	8000a60 <__aeabi_dcmpgt>
 8006b6c:	b138      	cbz	r0, 8006b7e <floor+0x46>
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	da53      	bge.n	8006c1a <floor+0xe2>
 8006b72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006b76:	4325      	orrs	r5, r4
 8006b78:	d052      	beq.n	8006c20 <floor+0xe8>
 8006b7a:	4c2d      	ldr	r4, [pc, #180]	; (8006c30 <floor+0xf8>)
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	e024      	b.n	8006bce <floor+0x96>
 8006b84:	4f2b      	ldr	r7, [pc, #172]	; (8006c34 <floor+0xfc>)
 8006b86:	4137      	asrs	r7, r6
 8006b88:	ea01 0307 	and.w	r3, r1, r7
 8006b8c:	4303      	orrs	r3, r0
 8006b8e:	d01e      	beq.n	8006bce <floor+0x96>
 8006b90:	a325      	add	r3, pc, #148	; (adr r3, 8006c28 <floor+0xf0>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fb1d 	bl	80001d4 <__adddf3>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f7f9 ff5f 	bl	8000a60 <__aeabi_dcmpgt>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0eb      	beq.n	8006b7e <floor+0x46>
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	bfbe      	ittt	lt
 8006baa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006bae:	4133      	asrlt	r3, r6
 8006bb0:	18e4      	addlt	r4, r4, r3
 8006bb2:	ea24 0407 	bic.w	r4, r4, r7
 8006bb6:	2500      	movs	r5, #0
 8006bb8:	e7e1      	b.n	8006b7e <floor+0x46>
 8006bba:	2e33      	cmp	r6, #51	; 0x33
 8006bbc:	dd0b      	ble.n	8006bd6 <floor+0x9e>
 8006bbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006bc2:	d104      	bne.n	8006bce <floor+0x96>
 8006bc4:	ee10 2a10 	vmov	r2, s0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	f7f9 fb03 	bl	80001d4 <__adddf3>
 8006bce:	ec41 0b10 	vmov	d0, r0, r1
 8006bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006bda:	f04f 37ff 	mov.w	r7, #4294967295
 8006bde:	40df      	lsrs	r7, r3
 8006be0:	4238      	tst	r0, r7
 8006be2:	d0f4      	beq.n	8006bce <floor+0x96>
 8006be4:	a310      	add	r3, pc, #64	; (adr r3, 8006c28 <floor+0xf0>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 faf3 	bl	80001d4 <__adddf3>
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f7f9 ff35 	bl	8000a60 <__aeabi_dcmpgt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d0c1      	beq.n	8006b7e <floor+0x46>
 8006bfa:	2c00      	cmp	r4, #0
 8006bfc:	da0a      	bge.n	8006c14 <floor+0xdc>
 8006bfe:	2e14      	cmp	r6, #20
 8006c00:	d101      	bne.n	8006c06 <floor+0xce>
 8006c02:	3401      	adds	r4, #1
 8006c04:	e006      	b.n	8006c14 <floor+0xdc>
 8006c06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	40b3      	lsls	r3, r6
 8006c0e:	441d      	add	r5, r3
 8006c10:	45a8      	cmp	r8, r5
 8006c12:	d8f6      	bhi.n	8006c02 <floor+0xca>
 8006c14:	ea25 0507 	bic.w	r5, r5, r7
 8006c18:	e7b1      	b.n	8006b7e <floor+0x46>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	462c      	mov	r4, r5
 8006c1e:	e7ae      	b.n	8006b7e <floor+0x46>
 8006c20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006c24:	e7ab      	b.n	8006b7e <floor+0x46>
 8006c26:	bf00      	nop
 8006c28:	8800759c 	.word	0x8800759c
 8006c2c:	7e37e43c 	.word	0x7e37e43c
 8006c30:	bff00000 	.word	0xbff00000
 8006c34:	000fffff 	.word	0x000fffff

08006c38 <__ieee754_log>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	ec51 0b10 	vmov	r0, r1, d0
 8006c40:	ed2d 8b04 	vpush	{d8-d9}
 8006c44:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006c48:	b083      	sub	sp, #12
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	da29      	bge.n	8006ca2 <__ieee754_log+0x6a>
 8006c4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c52:	4303      	orrs	r3, r0
 8006c54:	ee10 2a10 	vmov	r2, s0
 8006c58:	d10c      	bne.n	8006c74 <__ieee754_log+0x3c>
 8006c5a:	49cf      	ldr	r1, [pc, #828]	; (8006f98 <__ieee754_log+0x360>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2000      	movs	r0, #0
 8006c62:	f7f9 fd97 	bl	8000794 <__aeabi_ddiv>
 8006c66:	ec41 0b10 	vmov	d0, r0, r1
 8006c6a:	b003      	add	sp, #12
 8006c6c:	ecbd 8b04 	vpop	{d8-d9}
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	2900      	cmp	r1, #0
 8006c76:	da05      	bge.n	8006c84 <__ieee754_log+0x4c>
 8006c78:	460b      	mov	r3, r1
 8006c7a:	f7f9 faa9 	bl	80001d0 <__aeabi_dsub>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	e7ee      	b.n	8006c62 <__ieee754_log+0x2a>
 8006c84:	4bc5      	ldr	r3, [pc, #788]	; (8006f9c <__ieee754_log+0x364>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	f7f9 fc5a 	bl	8000540 <__aeabi_dmul>
 8006c8c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006c90:	460d      	mov	r5, r1
 8006c92:	4ac3      	ldr	r2, [pc, #780]	; (8006fa0 <__ieee754_log+0x368>)
 8006c94:	4295      	cmp	r5, r2
 8006c96:	dd06      	ble.n	8006ca6 <__ieee754_log+0x6e>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	f7f9 fa9a 	bl	80001d4 <__adddf3>
 8006ca0:	e7e1      	b.n	8006c66 <__ieee754_log+0x2e>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e7f5      	b.n	8006c92 <__ieee754_log+0x5a>
 8006ca6:	152c      	asrs	r4, r5, #20
 8006ca8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006cac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006cb0:	441c      	add	r4, r3
 8006cb2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006cb6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cbe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006cc2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006cc6:	ea42 0105 	orr.w	r1, r2, r5
 8006cca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4bb4      	ldr	r3, [pc, #720]	; (8006fa4 <__ieee754_log+0x36c>)
 8006cd2:	f7f9 fa7d 	bl	80001d0 <__aeabi_dsub>
 8006cd6:	1cab      	adds	r3, r5, #2
 8006cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	4682      	mov	sl, r0
 8006ce0:	468b      	mov	fp, r1
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	dc53      	bgt.n	8006d90 <__ieee754_log+0x158>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f7f9 fe91 	bl	8000a10 <__aeabi_dcmpeq>
 8006cee:	b1d0      	cbz	r0, 8006d26 <__ieee754_log+0xee>
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	f000 8122 	beq.w	8006f3a <__ieee754_log+0x302>
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7f9 fbb8 	bl	800046c <__aeabi_i2d>
 8006cfc:	a390      	add	r3, pc, #576	; (adr r3, 8006f40 <__ieee754_log+0x308>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	f7f9 fc1b 	bl	8000540 <__aeabi_dmul>
 8006d0a:	a38f      	add	r3, pc, #572	; (adr r3, 8006f48 <__ieee754_log+0x310>)
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	4604      	mov	r4, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fc12 	bl	8000540 <__aeabi_dmul>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	e7ba      	b.n	8006c9c <__ieee754_log+0x64>
 8006d26:	a38a      	add	r3, pc, #552	; (adr r3, 8006f50 <__ieee754_log+0x318>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	4659      	mov	r1, fp
 8006d30:	f7f9 fc06 	bl	8000540 <__aeabi_dmul>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	2000      	movs	r0, #0
 8006d3a:	499b      	ldr	r1, [pc, #620]	; (8006fa8 <__ieee754_log+0x370>)
 8006d3c:	f7f9 fa48 	bl	80001d0 <__aeabi_dsub>
 8006d40:	4652      	mov	r2, sl
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	465b      	mov	r3, fp
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	f7f9 fbf8 	bl	8000540 <__aeabi_dmul>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4630      	mov	r0, r6
 8006d56:	4639      	mov	r1, r7
 8006d58:	f7f9 fbf2 	bl	8000540 <__aeabi_dmul>
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	b914      	cbnz	r4, 8006d68 <__ieee754_log+0x130>
 8006d62:	4632      	mov	r2, r6
 8006d64:	463b      	mov	r3, r7
 8006d66:	e0a2      	b.n	8006eae <__ieee754_log+0x276>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f7f9 fb7f 	bl	800046c <__aeabi_i2d>
 8006d6e:	a374      	add	r3, pc, #464	; (adr r3, 8006f40 <__ieee754_log+0x308>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	4680      	mov	r8, r0
 8006d76:	4689      	mov	r9, r1
 8006d78:	f7f9 fbe2 	bl	8000540 <__aeabi_dmul>
 8006d7c:	a372      	add	r3, pc, #456	; (adr r3, 8006f48 <__ieee754_log+0x310>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	4604      	mov	r4, r0
 8006d84:	460d      	mov	r5, r1
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	f7f9 fbd9 	bl	8000540 <__aeabi_dmul>
 8006d8e:	e0a7      	b.n	8006ee0 <__ieee754_log+0x2a8>
 8006d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d94:	f7f9 fa1e 	bl	80001d4 <__adddf3>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4650      	mov	r0, sl
 8006d9e:	4659      	mov	r1, fp
 8006da0:	f7f9 fcf8 	bl	8000794 <__aeabi_ddiv>
 8006da4:	ec41 0b18 	vmov	d8, r0, r1
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7f9 fb5f 	bl	800046c <__aeabi_i2d>
 8006dae:	ec53 2b18 	vmov	r2, r3, d8
 8006db2:	ec41 0b19 	vmov	d9, r0, r1
 8006db6:	ec51 0b18 	vmov	r0, r1, d8
 8006dba:	f7f9 fbc1 	bl	8000540 <__aeabi_dmul>
 8006dbe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006dc2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4689      	mov	r9, r1
 8006dd0:	f7f9 fbb6 	bl	8000540 <__aeabi_dmul>
 8006dd4:	a360      	add	r3, pc, #384	; (adr r3, 8006f58 <__ieee754_log+0x320>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	f7f9 fbaf 	bl	8000540 <__aeabi_dmul>
 8006de2:	a35f      	add	r3, pc, #380	; (adr r3, 8006f60 <__ieee754_log+0x328>)
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f7f9 f9f4 	bl	80001d4 <__adddf3>
 8006dec:	4632      	mov	r2, r6
 8006dee:	463b      	mov	r3, r7
 8006df0:	f7f9 fba6 	bl	8000540 <__aeabi_dmul>
 8006df4:	a35c      	add	r3, pc, #368	; (adr r3, 8006f68 <__ieee754_log+0x330>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f7f9 f9eb 	bl	80001d4 <__adddf3>
 8006dfe:	4632      	mov	r2, r6
 8006e00:	463b      	mov	r3, r7
 8006e02:	f7f9 fb9d 	bl	8000540 <__aeabi_dmul>
 8006e06:	a35a      	add	r3, pc, #360	; (adr r3, 8006f70 <__ieee754_log+0x338>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 f9e2 	bl	80001d4 <__adddf3>
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	f7f9 fb94 	bl	8000540 <__aeabi_dmul>
 8006e18:	a357      	add	r3, pc, #348	; (adr r3, 8006f78 <__ieee754_log+0x340>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	4680      	mov	r8, r0
 8006e20:	4689      	mov	r9, r1
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fb8b 	bl	8000540 <__aeabi_dmul>
 8006e2a:	a355      	add	r3, pc, #340	; (adr r3, 8006f80 <__ieee754_log+0x348>)
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f7f9 f9d0 	bl	80001d4 <__adddf3>
 8006e34:	4632      	mov	r2, r6
 8006e36:	463b      	mov	r3, r7
 8006e38:	f7f9 fb82 	bl	8000540 <__aeabi_dmul>
 8006e3c:	a352      	add	r3, pc, #328	; (adr r3, 8006f88 <__ieee754_log+0x350>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 f9c7 	bl	80001d4 <__adddf3>
 8006e46:	4632      	mov	r2, r6
 8006e48:	463b      	mov	r3, r7
 8006e4a:	f7f9 fb79 	bl	8000540 <__aeabi_dmul>
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4602      	mov	r2, r0
 8006e52:	4649      	mov	r1, r9
 8006e54:	4640      	mov	r0, r8
 8006e56:	f7f9 f9bd 	bl	80001d4 <__adddf3>
 8006e5a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006e5e:	9b01      	ldr	r3, [sp, #4]
 8006e60:	3551      	adds	r5, #81	; 0x51
 8006e62:	431d      	orrs	r5, r3
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	4680      	mov	r8, r0
 8006e68:	4689      	mov	r9, r1
 8006e6a:	dd48      	ble.n	8006efe <__ieee754_log+0x2c6>
 8006e6c:	4b4e      	ldr	r3, [pc, #312]	; (8006fa8 <__ieee754_log+0x370>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4650      	mov	r0, sl
 8006e72:	4659      	mov	r1, fp
 8006e74:	f7f9 fb64 	bl	8000540 <__aeabi_dmul>
 8006e78:	4652      	mov	r2, sl
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	f7f9 fb60 	bl	8000540 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	4640      	mov	r0, r8
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	f7f9 f9a2 	bl	80001d4 <__adddf3>
 8006e90:	ec53 2b18 	vmov	r2, r3, d8
 8006e94:	f7f9 fb54 	bl	8000540 <__aeabi_dmul>
 8006e98:	4680      	mov	r8, r0
 8006e9a:	4689      	mov	r9, r1
 8006e9c:	b964      	cbnz	r4, 8006eb8 <__ieee754_log+0x280>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 f993 	bl	80001d0 <__aeabi_dsub>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4650      	mov	r0, sl
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	f7f9 f98d 	bl	80001d0 <__aeabi_dsub>
 8006eb6:	e6d6      	b.n	8006c66 <__ieee754_log+0x2e>
 8006eb8:	a321      	add	r3, pc, #132	; (adr r3, 8006f40 <__ieee754_log+0x308>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	ec51 0b19 	vmov	r0, r1, d9
 8006ec2:	f7f9 fb3d 	bl	8000540 <__aeabi_dmul>
 8006ec6:	a320      	add	r3, pc, #128	; (adr r3, 8006f48 <__ieee754_log+0x310>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	ec51 0b19 	vmov	r0, r1, d9
 8006ed4:	f7f9 fb34 	bl	8000540 <__aeabi_dmul>
 8006ed8:	4642      	mov	r2, r8
 8006eda:	464b      	mov	r3, r9
 8006edc:	f7f9 f97a 	bl	80001d4 <__adddf3>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f7f9 f972 	bl	80001d0 <__aeabi_dsub>
 8006eec:	4652      	mov	r2, sl
 8006eee:	465b      	mov	r3, fp
 8006ef0:	f7f9 f96e 	bl	80001d0 <__aeabi_dsub>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4620      	mov	r0, r4
 8006efa:	4629      	mov	r1, r5
 8006efc:	e7d9      	b.n	8006eb2 <__ieee754_log+0x27a>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4650      	mov	r0, sl
 8006f04:	4659      	mov	r1, fp
 8006f06:	f7f9 f963 	bl	80001d0 <__aeabi_dsub>
 8006f0a:	ec53 2b18 	vmov	r2, r3, d8
 8006f0e:	f7f9 fb17 	bl	8000540 <__aeabi_dmul>
 8006f12:	4606      	mov	r6, r0
 8006f14:	460f      	mov	r7, r1
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	f43f af23 	beq.w	8006d62 <__ieee754_log+0x12a>
 8006f1c:	a308      	add	r3, pc, #32	; (adr r3, 8006f40 <__ieee754_log+0x308>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	ec51 0b19 	vmov	r0, r1, d9
 8006f26:	f7f9 fb0b 	bl	8000540 <__aeabi_dmul>
 8006f2a:	a307      	add	r3, pc, #28	; (adr r3, 8006f48 <__ieee754_log+0x310>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	ec51 0b19 	vmov	r0, r1, d9
 8006f38:	e727      	b.n	8006d8a <__ieee754_log+0x152>
 8006f3a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006f90 <__ieee754_log+0x358>
 8006f3e:	e694      	b.n	8006c6a <__ieee754_log+0x32>
 8006f40:	fee00000 	.word	0xfee00000
 8006f44:	3fe62e42 	.word	0x3fe62e42
 8006f48:	35793c76 	.word	0x35793c76
 8006f4c:	3dea39ef 	.word	0x3dea39ef
 8006f50:	55555555 	.word	0x55555555
 8006f54:	3fd55555 	.word	0x3fd55555
 8006f58:	df3e5244 	.word	0xdf3e5244
 8006f5c:	3fc2f112 	.word	0x3fc2f112
 8006f60:	96cb03de 	.word	0x96cb03de
 8006f64:	3fc74664 	.word	0x3fc74664
 8006f68:	94229359 	.word	0x94229359
 8006f6c:	3fd24924 	.word	0x3fd24924
 8006f70:	55555593 	.word	0x55555593
 8006f74:	3fe55555 	.word	0x3fe55555
 8006f78:	d078c69f 	.word	0xd078c69f
 8006f7c:	3fc39a09 	.word	0x3fc39a09
 8006f80:	1d8e78af 	.word	0x1d8e78af
 8006f84:	3fcc71c5 	.word	0x3fcc71c5
 8006f88:	9997fa04 	.word	0x9997fa04
 8006f8c:	3fd99999 	.word	0x3fd99999
	...
 8006f98:	c3500000 	.word	0xc3500000
 8006f9c:	43500000 	.word	0x43500000
 8006fa0:	7fefffff 	.word	0x7fefffff
 8006fa4:	3ff00000 	.word	0x3ff00000
 8006fa8:	3fe00000 	.word	0x3fe00000

08006fac <_init>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_fini>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr
